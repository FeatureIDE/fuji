layer Final;
import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;

import java.lang.String;
import java.lang.Object;

SoUrCe RooT Root "../../../C:/Users/Reimar/Documents/Uni/Master/1 Semester/EPDM/eclipseWorkspace/FeatureIDEChat/src/Root/Connection.jak";

/**
 * class for an individual connection to a client. allows to send messages to
 * this client and handles incoming messages.
 */
abstract class Connection$$Root extends Thread {
	protected Socket socket;

	protected ObjectInputStream inputStream;
	protected ObjectOutputStream outputStream;

	protected Server server;
	private boolean connectionOpen = true;
	private String clientName = "";

	public Connection$$Root(Socket s, Server server) {
		this.socket = s;
		try {
			inputStream = new ObjectInputStream((s.getInputStream()));
			outputStream = new ObjectOutputStream((s.getOutputStream()));
		} catch (IOException e) {
			e.printStackTrace();
		}

		this.server = server;
	}

	/**
	 * waits for incoming messages from the socket
	 */
	public void run() {
		try {
			while (connectionOpen) {
				try {
					Object msg = inputStream.readObject();
					handleIncomingMessage(msg);
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
				catch (SocketException e) {
					throw new IOException(e.getMessage());
				}
			}
		} catch (IOException ex) {
			System.out.println(ex.getMessage());
		} finally {
			server.removeConnection(this);
			server.broadcast(new Message(clientName + " verlässt den Raum."));
			try {
				socket.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}

	/**
	 * decides what to do with incoming messages
	 * 
	 * @param username
	 *            name of the client
	 * @param msg
	 *            received message
	 */
	protected void handleIncomingMessage(Object msg) {
		if (msg instanceof Message){
			Message tMsg = (Message) msg;
			
			if(clientName.compareTo("") == 0){
				clientName = tMsg.getUserName();
			}
			
			server.broadcast(tMsg);
		}
	}
	
	/**
	 * 
	 * sends a message to the client
	 * 
	 * @param msg
	 *          message to send
	 */
	public void send(Message msg) {
		try {
			synchronized (outputStream) {
				outputStream.writeObject(msg);
			}
			outputStream.flush();
		} catch (IOException ex) {
			connectionOpen = false;
		}
	}
}

SoUrCe  Log "../../../C:/Users/Reimar/Documents/Uni/Master/1 Semester/EPDM/eclipseWorkspace/FeatureIDEChat/src/Log/Connection.jak";


abstract class Connection$$Log extends  Connection$$Root  {
	
	protected void handleIncomingMessage(Object msg) {
		Super().handleIncomingMessage(msg);
		
		if(msg instanceof Message){
			Message tMsg = (Message) msg;
			server.getLogger().writeLogLine(tMsg.getUserName_And_Content());
		}
	}
}

SoUrCe  Authentification "../../../C:/Users/Reimar/Documents/Uni/Master/1 Semester/EPDM/eclipseWorkspace/FeatureIDEChat/src/Authentification/Connection.jak";

public class Connection extends  Connection$$Log  {
	String pw = "abc";
	boolean auth_accept = false;
	
	public void handleIncomingMessage(Object msg){
		if(auth_accept == false){
			if(msg instanceof Auth_Message){
				Auth_Message authMsg = (Auth_Message) msg;
				
				if(authMsg.getContent().compareTo(pw) == 0){
					Auth_Message m = new Auth_Message(Auth_Message.PW_ACCEPT);
					send(m);
					auth_accept = true;
					
				}else{
					send(new Auth_Message(Auth_Message.PW_INCORRECT));
				}
			} 
		}else{
			Super().handleIncomingMessage(msg);
		}
	}
	
	public void send(Message msg){
		if(auth_accept == true){
			Super().send(msg);
		}
		if(msg instanceof Auth_Message){
			Super().send(msg);
		}
	}
}