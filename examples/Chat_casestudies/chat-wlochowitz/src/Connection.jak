
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

SoUrCe RooT Basis "../features/Basis/Connection.jak";

/**
 * class for an individual connection to a client. allows to send messages to
 * this client and handles incoming messages.
 */
abstract class Connection$$Basis extends Thread {
	protected Socket socket;

	protected ObjectInputStream inputStream;

	protected ObjectOutputStream outputStream;

	private Server server;
	private boolean connectionOpen = true;

	public Connection$$Basis(Socket s, Server server) {
		this.socket = s;
		try {
			inputStream = new ObjectInputStream((s.getInputStream()));
			outputStream = new ObjectOutputStream((s.getOutputStream()));
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.server = server;
	}

	/**
	 * waits for incoming messages from the socket
	 */
	public void run() {
		String clientName = socket.getInetAddress().toString();
		try {
			server.broadcast(new TextMessage(clientName + " has joined.", "Server"));
			while (connectionOpen) {
				try {
					Object msg = inputStream.readObject();
					handleIncomingMessage(clientName, msg);
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			server.removeConnection(this);
			server.broadcast(new TextMessage(clientName + " has left.", "Server"));
			try {
				socket.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}

	/**
	 * decides what to do with incoming messages
	 * @param name name of the client
	 * @param msg received message
	 */
	private void handleIncomingMessage(String name, Object msg) {
		if (msg instanceof TextMessage) {
			TextMessage message = (TextMessage) msg;
			message.setSender(name);	
			process(message);
			server.broadcast(message);
		}	
	}
	
	protected void process(TextMessage msg) {}	
	

	/**
	 * sends a message to the client
	 * @param line text of the message
	 */
	public void send(String line) {
		send(new TextMessage(line, "Server"));
	}

	public void send(TextMessage msg) {
		try {
			synchronized (outputStream) {
				outputStream.writeObject(msg);
			}
			outputStream.flush();
		} catch (IOException ex) {
			connectionOpen = false;
		}
	}
}

SoUrCe  Historie "../features/Historie/Connection.jak";public class Connection extends  Connection$$Basis  {

	private final HistorieLogger logger = new HistorieLogger(Server.class.getName() + ".txt");

	protected void process(TextMessage msg) {
		Super().process(msg);
		logger.log(msg.toString());
	}	
}