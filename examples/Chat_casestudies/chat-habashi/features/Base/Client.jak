
import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.*;

public class Client implements Runnable {

	private ObjectInputStream inputStream;
	ObjectOutputStream outputStream;
	public Color defaultColor = Color.BLACK;

	private Thread thread;

	public static void main(String args[]) throws IOException {
		if (args.length != 2)
			throw new RuntimeException("wrong parameter!");
		
		Client client = new Client(args[0], Integer.parseInt(args[1]));
		
		new Console(client);		
	}

	
	public Client(String host, int port) {
		try {
			Socket s = new Socket(host, port);
			this.outputStream = new ObjectOutputStream(s.getOutputStream());
			this.inputStream = new ObjectInputStream(s.getInputStream());

			thread = new Thread(this);
			thread.start();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	
	public void run() {
		try {
			while (true) {
				Object msg = inputStream.readObject();
				handleIncomingMessage(msg);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			thread = null;
			try {
				outputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public void stop() {
		thread.stop();
	}

	void send(String text) {
		send(new OutgoingTextMessage(text, defaultColor));
	}

	void send(String text, Color color) {
		send(new OutgoingTextMessage(text, color));
	}

	protected void send(OutgoingTextMessage textMessage) {
		
		try {
			outputStream.writeObject(textMessage);
			outputStream.flush();
		} catch (IOException e) {
			e.printStackTrace();
			thread.stop();
		}
	}

	public void handleIncomingMessage(Object msg) throws IOException {
		if (msg instanceof TextMessage) {
			TextMessage tempTextMessage = (TextMessage) msg;
			fireAddLine(tempTextMessage.getText() + "\n");
		}	
	}

	void fireAddLine(String line) {
		for (Iterator iterator = listeners.iterator(); iterator.hasNext();) {
			ChatLineListener listener = (ChatLineListener) iterator.next();
			listener.newChatLine(line);
		}
	}

	private ArrayList listeners = new ArrayList();

	public void addListener(ChatLineListener listener) {
		listeners.add(listener);
	}

	public void removeLineListener(ChatLineListener listener) {
		listeners.remove(listener);
	}

	public void setDefaultColor(Color color) {
		this.defaultColor = color;
	}
}
