layer featureconfiguration;



import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashSet;
import java.util.Iterator;

SoUrCe RooT Base "../../../../Daten/workspace_EPMD_project/Client/src/Base/Server.jak";

//import common.TextMessage;

/**
 * server's main class. accepts incoming connections and allows broadcasting
 */
abstract class Server$$Base {

	public String password="3Qdy%(nO";
	
	
	
	public static void main(String args[]) throws IOException {
		if (args.length != 1)
			throw new RuntimeException("Syntax: ChatServer <port>");
		new Server(Integer.parseInt(args[0]));
	}

	/**
	 * awaits incoming connections and creates Connection objects accordingly.
	 * 
	 * @param port
	 *            port to listen on
	 */
	public Server$$Base(int port) throws IOException {
		ServerSocket server = new ServerSocket(port);
		while (true) {
			System.out.println("Waiting for Connections...");
			Socket client = server.accept();
			System.out.println("Accepted from " + client.getInetAddress());
			Connection c = connectTo(client);
			if (!c.equals(null)) c.start();
		}
	}

	/**
	 * creates a new connection for a socket
	 * 
	 * @param socket
	 *            socket
	 * @return the Connection object that handles all further communication with
	 *         this socket
	 */
	public Connection connectTo(Socket socket) {
		Connection connection = new Connection(socket, this);
		
		if (connection.initialize_Connection()){
		   //Connection accepted
		   connections.add(connection);
		   return connection;
		
		}else{
			//Connection refused
			return null;
		}
		
	
		
	}

	/**
	 * list of all known connections
	 */
	protected HashSet connections = new HashSet();

	/**
	 * send a message to all known connections
	 * 
	 * @param text
	 *            content of the message
	 */
	public void broadcast(String text) {
		synchronized (connections) {
			for (Iterator iterator = connections.iterator(); iterator.hasNext();) {
				Connection connection = (Connection) iterator.next();
				connection.send(text);
			}
		}
	}


	
	/**
	 * send a Textmessage to all known connections
	 * 
	 * @param Textmessage
	 *            a Textmessage Object
	 */
	public void broadcast(TextMessage text) {
		synchronized (connections) {
			for (Iterator iterator = connections.iterator(); iterator.hasNext();) {
				Connection connection = (Connection) iterator.next();
				connection.send(text);
			}
		}
	}
	
	/**
	 * remove a connection so that broadcasts are no longer sent there.
	 * 
	 * @param connection
	 *            connection to remove
	 */
	public void removeConnection(Connection connection) {
		connections.remove(connection);
	}

}

SoUrCe  Logging "../../../../Daten/workspace_EPMD_project/Client/src/Logging/Server.jak";

public class Server extends  Server$$Base  {


	//needed for writing the log file
    private String logfile_path = "./chat_server_messages.log";
	protected File file;//  = new File(logfile_path);
    protected BufferedWriter bw;// = new BufferedWriter(new FileWriter(file));
    
    //you may want to change the location of the log file
  
    public void log(TextMessage msg){
    
         System.out.println("LOGGING: writing received message '"+msg.getContent()+"' to logfile...");
    
    }
  

}