

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;

import common.IMessage;
import common.TextMessage;

/**
 * simple chat client
 */
public class Client implements Runnable {
	
	protected static Client client;
	
	public static void main(String args[]) throws IOException {
		if (args.length != 2)
			throw new RuntimeException("Syntax: ChatClient <host> <port>");
	
		client = new Client(args[0], Integer.parseInt(args[1]));
	}

	protected ObjectInputStream inputStream;
	protected ObjectOutputStream outputStream;
	protected Thread thread;
	
	private String host;
	private int port;
	protected boolean connected = false;
    
    private ArrayList listeners = new ArrayList();
	
	public Client(String host, int port) {
		this.host = host;
		this.port = port;
	}
	
	public void connect() {
	    if (connected) {
	        return;
	    }
	    try {
	        fireAddLine("Connecting to " + host + " (port " + port
                                + ")...");
                Socket s = new Socket(host, port);
                this.outputStream = new ObjectOutputStream((s.getOutputStream()));
                this.inputStream = new ObjectInputStream((s.getInputStream()));
                connected = true;
                thread = new Thread(this);
                thread.start();
            } catch (Exception e) {
                fireAddLine("Connection failed! "
                        + "Please contact your server admin!");
            }
	}

	/**
	 * main method. waits for incoming messages.
	 */
	public void run() {
	    try {
	        while (true) {
	            Object msg = inputStream.readObject();
	            handleIncomingMessage(msg);
	        }
	    } catch (IOException ex) {
	        ex.printStackTrace();
	    } catch (ClassNotFoundException e) {
	        e.printStackTrace();
	    } finally {
	        thread = null;
	        try {
	            outputStream.close();
	        } catch (IOException ex) {
	            ex.printStackTrace();
	        }
	    }
	}

	/**
	 * decides what to do with incoming messages
	 * 
	 * @param msg
	 *            the message (Object) received from the sockets
	 */
	protected void handleIncomingMessage(Object msg) {
	    if (msg instanceof TextMessage) {
	        fireAddLine(((TextMessage) msg).getContent() + "\n");
	    }
	}

	public void send(String line) {
		send(new TextMessage(line));
	}
	
	public void send(IMessage msg) {
	    try {
	        if (outputStream == null) {
		            fireAddLine("Please connect to server!");
	        }
	        else {
	            beforeSending(msg);
                outputStream.writeObject(msg);
                outputStream.flush();
	        }
	    } catch (IOException ex) {
	        ex.printStackTrace();
	        thread.stop();
	    }
	}
	
	protected void beforeSending(IMessage msg) {
	}
	
	/**
	 * addListner method for the observer pattern
	 */
	public void addLineListener(ChatLineListener listener) {
		listeners.add(listener);
	}

	/**
	 * removeListner method for the observer pattern
	 */
	public void removeLineListener(ChatLineListener listner) {
		listeners.remove(listner);
	}

	/**
	 * fire Listner method for the observer pattern
	 */
	public void fireAddLine(String line) {
		for (Iterator iterator = listeners.iterator(); iterator.hasNext();) {
			ChatLineListener listener = (ChatLineListener) iterator.next();
			listener.newChatLine(line);
		}
	}
	
	public void stop() {
		thread.stop();
	}
}
