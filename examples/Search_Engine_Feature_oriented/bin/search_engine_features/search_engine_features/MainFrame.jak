layer search_engine_features;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.ScrollPane;
import java.awt.Scrollbar;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.JComboBox;

import org.apache.lucene.document.Document;
import org.apache.lucene.index.TermFreqVector;
import org.apache.lucene.search.ScoreDoc;
import java.awt.GridBagLayout;

SoUrCe RooT GUI "Workspace/Plugin2/Search_Engine_Feature_oriented/src/GUI/MainFrame.jak";


/**
 * Hauptfenster der Anwendung.
 * 
 * @author Mr. Pink
 */
abstract class MainFrame$$GUI extends JFrame implements UI{
	public static final long serialVersionUID = 1L;

	// Referenz zu der Main-Klasse.
	public MrPinkMain mrPinkMain = null;

	// Components
	
	
	

	public JButton startButton;
	//public JTextField queryTextFieldfield;
	public JPanel searchResultContainer;
	public JPanel groupBoxSearch;
	public JScrollPane scrollPane;
	public JTextArea informationField;
	
	public JComboBox queryTextFieldJComboBox;
	

	// Hier werden die Einstellung der Optionen gespeichert
	public OptionStorage optionStorage = new OptionStorage(10, false, false);

	/**
	 * Konstruktor.
	 * 
	 * Intitialisiert das Hauptfenster.
	 * 
	 * @param mrPinkMain   Referenz zu der Main-Klasse.
	 */
	public MainFrame$$GUI(MrPinkMain mrPinkMain) {
		this.mrPinkMain = mrPinkMain;
		this.setSize(600, 400);
		this.setVisible(true);
		this.setMinimumSize(this.getSize());
		this.setLayout(new BorderLayout());
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("MrPink");

		initComponents();

		/**
		 * Wegen einem Formatierungsproblem. Wenn diese Zeilen rausgenommen
		 * werden, kann es beim Start des Programmes passieren, das nicht alle
		 * Components des Fraims vernünftig angezeigt werden.
		 */
		this.setSize(600, 401);
		this.setSize(600, 400);
	}

	public void initComponents(){
		createGroupBoxSearch();
	}


/*	
	public void createGroupBoxIndex() {
		// in Single/Multi_Directory ausgelagert
	}
	*/
	/**
	 * Erzeugt eine GroupBox.
	 * 
	 * @param title     Name der GroupBox
	 * @param fontSize  Größe der Schrift
	 * @param color     Farbe der Umrandung
	 * @return          das entsprechend präparierte JPanel-Objekt
	 */
	public static JPanel makeGroupBox(String title, int fontSize, Color color) {
		JPanel panel = new JPanel();
		Border blackline = BorderFactory.createLineBorder(color);
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		TitledBorder border = BorderFactory.createTitledBorder(blackline,
				title, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.CENTER,
				new Font("", Font.ITALIC, fontSize));// /.createTitledBorder(blackline,title);
		panel.setBorder(border);
		return panel;
	}

	JPanel xAxis1;

	/**
	 * Erzeugt die Search-GroupBox mit allen beinhaltenden Elementen.
	 */
	public void createGroupBoxSearch() {
		groupBoxSearch = makeGroupBox("Search", 30, Color.BLACK);
		this.add(groupBoxSearch, BorderLayout.CENTER);
		groupBoxSearch.setLayout(new BorderLayout());

		xAxis1 = new JPanel();
		xAxis1.setLayout(new BoxLayout(xAxis1, BoxLayout.X_AXIS));

        queryTextFieldJComboBox = new JComboBox();
		queryTextFieldJComboBox.setBounds(0, 0, 20, 50);
		queryTextFieldJComboBox.setFont(new Font("", Font.ITALIC, 15));
		queryTextFieldJComboBox.setEditable(true);
		xAxis1.add(queryTextFieldJComboBox);
		
		//queryTextFieldfield = new JTextField();
//		queryTextFieldfield.setBounds(0, 0, 20, 50);
//		queryTextFieldfield.setFont(new Font("", Font.ITALIC, 15));
//		xAxis1.add(queryTextFieldfield);

		startButton = new JButton("Search");
		startButton.addActionListener(new ButtonListener(this));
		startButton.setFont(new Font("", Font.ITALIC, 15));
		xAxis1.add(startButton);

		createOptionsButton();	

		groupBoxSearch.add(xAxis1, BorderLayout.NORTH);

		// Standard-Button setzen
		
		this.getRootPane().setDefaultButton(startButton);
		this.enableSearchGroupBox(false);

		// resultPanel
		searchResultContainer = new JPanel();
		groupBoxSearch.add(searchResultContainer,BorderLayout.CENTER);
		searchResultContainer.setLayout(new GridBagLayout());
		scrollPane = new JScrollPane(searchResultContainer);
		
		informationField = new JTextArea(2,1);
		informationField.setFont(new Font("", Font.ITALIC, 15));
		informationField.setEditable(false);
		informationField.setEnabled(false);
		informationField.setText("Type in multiple words to do an 'AND' search (all terms must be present). You can also use + to specify a word that must be contained in the text,\n or - for words you don't want to find. Additionally, you can use the field names 'title' and 'content' to narrow your search.");
		groupBoxSearch.add(informationField,BorderLayout.SOUTH);
		groupBoxSearch.add(scrollPane);
	}
	
	public void createOptionsButton(){

	}
	
/*
	public void showIndexCreateMessageDialog() {
		// in Single/Mutli_Directory ausgelagert	
	}
*/
	/**
	 * Such-Box (de)aktivieren.
	 * 
	 * @param b True zum aktivieren, ansonsten False.
	 */
	public void enableSearchGroupBox(boolean b) {
	
		//this.queryTextFieldfield.setEnabled(b);
		this.queryTextFieldJComboBox.setEnabled(b);
		this.startButton.setEnabled(b);
	}

	
	/**
	 * Öffnet einen Dialog, der die übergebene Error-Message ausgibt.
	 * 
	 * @param message Fehler der ausgegeben werden soll
	 */
	public void printErrorMessage(String message) {
		JOptionPane.showMessageDialog(this, message, "An error occurred!", JOptionPane.ERROR_MESSAGE);
	}

	public void printSearch_SearchPanel(ScoreDoc[] hits, Indexer index, String query) {
		
		// die Funktioanlität ist in die Features ausgelagert
		
	}


}

SoUrCe  Multi_Directory "Workspace/Plugin2/Search_Engine_Feature_oriented/src/Multi_Directory/MainFrame.jak";

abstract class MainFrame$$Multi_Directory extends  MainFrame$$GUI  {
	
	
	public JComboBox indexPath;
	public JButton addButton;
	public JButton removeButton;
	public JButton indexButton;

	public void initComponents(){
	
		createGroupBoxIndex();
		Super().initComponents();
	}
	
	
	/**
	 * Erzeugt die Index-GroupBox mit allen beinhaltenden Elementen.
	 */
	public void createGroupBoxIndex() {
		JPanel indexGroupBox = makeGroupBox("Indexing", 15, Color.BLACK);

		this.add(indexGroupBox, BorderLayout.NORTH);

		JPanel xAxis1 = new JPanel();
		xAxis1.setLayout(new BoxLayout(xAxis1, BoxLayout.X_AXIS));

		indexPath = new JComboBox();
		//indexPath.setEnabled(false); 
		indexPath.setVisible(true);
		indexPath.setBounds(0, 0, 20, 50);
		indexPath.setFont(new Font("", Font.ITALIC, 10));
		xAxis1.add(indexPath);

		addButton = new JButton("Add");
		addButton.addActionListener(new ButtonListener(this));
		addButton.setFont(new Font("", Font.ITALIC, 10));
		xAxis1.add(addButton);
		
		removeButton = new JButton("Remove");
		removeButton.addActionListener(new ButtonListener(this));
		removeButton.setFont(new Font("", Font.ITALIC, 10));
		xAxis1.add(removeButton);

		indexGroupBox.add(xAxis1);

		JPanel xAxis2 = new JPanel();
		xAxis2.setLayout(new BoxLayout(xAxis2, BoxLayout.X_AXIS));

		indexButton = new JButton("Index");
		indexButton.addActionListener(new ButtonListener(this));
		indexButton.setFont(new Font("", Font.ITALIC, 10));
		xAxis2.add(indexButton);

		indexGroupBox.add(xAxis2);
	}

	/**
	 * Dialog zur Indexersetllung.
	 * 
	 * Öffnet eine Dialog der das Indizieren startet oder in dem das Indizieren
	 * abgebrochen werden kann. Fals der zu indizierende Pfad noch nicht
	 * angegeben wurde, kommt eine Fehlermeldung.
	 */
	public void showIndexCreateMessageDialog() {
		if (indexPath.getSelectedIndex() == -1) {
			printErrorMessage("No path given.");
			return;
		}

		// Index erstellen

		int returnValue = JOptionPane.showOptionDialog(this, "The directory " + (String) indexPath.getSelectedItem()
						+ " is being indexed.", "Indexing",
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE,
				null, null, null);

		if (returnValue == JOptionPane.OK_OPTION) {
			String[] allPaths = new String[indexPath.getItemCount()];
			for(int i = 0; i < indexPath.getItemCount();i++){
				allPaths[i] = (String)indexPath.getItemAt(i);
			}
			
			mrPinkMain.createIndex(allPaths);
			this.enableSearchGroupBox(true);
		}
	}
}

SoUrCe  Normal_View "Workspace/Plugin2/Search_Engine_Feature_oriented/src/Normal_View/MainFrame.jak";

public class MainFrame extends  MainFrame$$Multi_Directory  {

	public void printSearch_SearchPanel(ScoreDoc[] hits, Indexer index,
			String query) {
		searchResultContainer.setLayout(null);
		try {
			if (hits.length == 0) {
				new NoDocument(searchResultContainer, new Point((groupBoxSearch
						.getWidth() / 2) - 50, searchResultContainer
						.getPreferredSize().height));
			} else {

				for (int rankPos = 0; rankPos < hits.length; rankPos++) {
					int documentID = hits[rankPos].doc;
					Object[] ret = index.getDocument(documentID);
					Document document = (Document) ret[0];
					TermFreqVector[] freqVec = (TermFreqVector[]) ret[1];

					String lastModification = document.getField("lastModify")
							.stringValue();
					Timestamp ts = new Timestamp(new Long(lastModification));
					Date d = new Date(ts.getTime());
					lastModification = d.toString();

					String size = document.getField("size").stringValue()
							+ " Byte";

					Point position = new Point(10, searchResultContainer
							.getPreferredSize().height);
					// DatenSatz erzeugen
					ArrayList daten = new ArrayList();
					// rankingPos
					daten.add((1 + rankPos) + "");
					// ID
					daten.add(documentID + "");
					// name
					daten.add(document.getField("title").stringValue());
					// location
					daten.add(document.getField("path").stringValue());
					// größe
					daten.add(size);
					// age
					daten.add(lastModification);
					// Wöter
					// wenn eine Query vorhanden ist
					if (query != null) {
						String[] queryTerms = index.getQueryTerms(query);
						for (int i = 0; i < queryTerms.length; i++) {
							daten.add(queryTerms[i]);
							daten.add(index.getTermFreq(freqVec, queryTerms[i]) + "");
						}
					}

					// Added das Ergebnis auf das Panel
					HitDocument dokL = new HitDocument(searchResultContainer,
							position, daten);
					/**
					 * In diesem Bereich wird die PrefereceSize des Container an
					 * die beinhaltenden Panel angepasst. Dadurch wird
					 * sichergestellt, dass die Scrollbars wie gewünscht
					 * funktionieren.
					 */
					if (dokL.getWidth() > searchResultContainer
							.getPreferredSize().width) {
						searchResultContainer
								.setPreferredSize(new Dimension(
										dokL.getWidth(), dokL.getY()
												+ dokL.getHeight()));
					} else
						searchResultContainer.setPreferredSize(new Dimension(
								groupBoxSearch.getSize().width, dokL.getY()
										+ dokL.getHeight()));
				}
				searchResultContainer.repaint();
				scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
				scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
			}
		} catch (Exception e) {
			System.err.println(e);
			e.printStackTrace();
		}

	}

}