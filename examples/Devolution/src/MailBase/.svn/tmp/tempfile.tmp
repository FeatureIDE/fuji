import java.io.File;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 * @author Marcel Jaeschke
 * @since 1.6
 */
public class MailView extends ModelView implements TreeSelectionListener {
	protected final JMenuItem miPreferences = new JMenuItem( ProgramImages.PREFERENCES );

	/**
	 * Default constructor.
	 * 
	 * @param modul The modul which use the viewer.
	 */
	public MailView ( final Modul modul ) {
		Super(Modul)( modul );
		initView();
		this.lbStatusbar.setText( "hallo (remove me in \"MailView.MailView(Modul)\" )" );
	}
	/* === INITIALIZER === */
	/*
	 * (non-Javadoc)
	 * 
	 * @see Base.ModelView#initMainContent()
	 */
	//@Override
	public JComponent initMainContent () {
		getMainContent().add( new MailContentPane(null) );
		return this.coContent;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see Base.ModelView#initMenu()
	 */
	//@Override
	public JMenu initMenu () {
		this.mnMenu.add( new JMenuItem( "check accounts" ) );
		this.mnMenu.addSeparator();
		this.miPreferences.addActionListener( this );
		this.mnMenu.add( this.miPreferences );
		return this.mnMenu;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see Base.ModelView#initPreferences()
	 */
	//@Override
	public PreferencesEntry initPreferences () {
		this.preferences = new MailPreferences( (Mail) this.modul );
		return this.preferences;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see Base.ModelView#initSidepanel()
	 */
	//@Override
	public JComponent initSidepanel () {
		// TODO: How to Use Trees
		// http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html
		DefaultMutableTreeNode top = new DefaultMutableTreeNode("Accounts");
<<<<<<< .mine
		Account[] accounts = Account.getAccounts();
		if ( accounts != null )
			for (int i=0; i<accounts.length; i++){
			    String accName = accounts[i].getName();
				DefaultMutableTreeNode node = new DefaultMutableTreeNode(accName);
				top.add(node);
			}
	
		if(this.coSidepanel == null){
			this.coSidepanel = new JTree(top);
			((JTree)this.coSidepanel).addTreeSelectionListener(this);
=======

		File directory = new File(Account.accountLocation);
		File[] accounts = directory.listFiles();
		
		if (accounts != null) {
			for(int i=0; i<accounts.length; i++){
			    String name = accounts[i].getName();
			    if (name.endsWith(".xml")){
					String accName = name.substring(0, name.lastIndexOf("."));
					DefaultMutableTreeNode node = new DefaultMutableTreeNode(accName);
					top.add(node);
			    }
			}
		} else {
			System.err.println("Error in MailBase.MailView.initSidepanel: Account directory not found");
>>>>>>> .r43
		}
<<<<<<< .mine
		else{
			((DefaultTreeModel)((JTree)this.coSidepanel).getModel()).setRoot(top);
		}
=======
		
		this.coSidepanel = new JTree(top);
		((JTree)this.coSidepanel).addTreeSelectionListener(this);
>>>>>>> .r43
		return this.coSidepanel;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see Base.ModelView#initToolbar()
	 */
	//@Override
	public JComponent initToolbar () {
		this.tbToolbar.add( new JButton( "toolbar of mail" ) );
		return this.tbToolbar;
	}
	/* === NONONONON === */
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	//@Override
	public void actionPerformed ( final ActionEvent event ) {
		final Object source = event.getSource();
		if ( this.miPreferences.equals( source ) ) {
			new PreferencesDialog( this.modul.getBase(), this.modul.getBase().getView(), new TreePath( this.preferences ) );
		} else {
			super.actionPerformed( event );
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see miscellaneous.MultilingualListener#changeLanguage()
	 */
	public void changeLanguage () {
		this.miPreferences.setText( "Preferences" );
		// TODO Hier müssen alle sprachabhänigen Strings gesetzt werden die im
		// gesammten Mail-Modul verwendet werden!
	}

	public void valueChanged(TreeSelectionEvent e){
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) ((JTree)e.getSource()).getSelectionPath().getLastPathComponent();
		if (node!=null && !node.isRoot()){
			try{
				String name = node.toString();
				this.coContent.removeAll();
				this.coSidepanel.setEnabled( false );
				MailContentPane pane = new MailContentPane(name);
				this.coContent.add(pane);
				pane.insertMessages();
				this.modul.getBase().view.validate();
				this.coSidepanel.setEnabled( true );
			} catch (Exception ex) {
					this.coSidepanel.setEnabled( true );
					System.out.println(ex.toString());
			}
		}
	}
}
