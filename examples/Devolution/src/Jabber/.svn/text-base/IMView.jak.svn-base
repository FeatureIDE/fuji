
import org.jivesoftware.smack.*;
import org.jivesoftware.smack.packet.*;
import org.jivesoftware.smack.filter.*;
import org.jivesoftware.smack.ChatManager.*;
import javax.swing.*;

public refines class IMView implements JabberRosterListener {
	protected JButton btnJabberConnect;
    protected JMenuItem mnuJabberConnect;
    protected JMenuItem mnuJabberDisconnect;
    protected JabberConnection jabCon;

    public JMenu initMenu () {
    	JMenu mnuJabber = new JMenu("Jabber");
    	this.mnMenu.add(mnuJabber);
    	
    	mnuJabber.add(mnuJabberConnect = new JMenuItem("Connect"));
    	mnuJabberConnect.addActionListener(this);
    	
        mnuJabber.add(mnuJabberDisconnect = new JMenuItem("Disconnect"));
        mnuJabberDisconnect.addActionListener(this);
        mnuJabberDisconnect.setEnabled(false);
        
        return Super().initMenu();
    }
    
    public JComponent initToolbar() {
        this.tbToolbar.add(btnJabberConnect = new JButton("Connect to Jabber"));
        btnJabberConnect.addActionListener(this);
        return Super().initToolbar();
    }
    
    public void actionPerformed(final ActionEvent event) {
    	// Refines the IMView Action Listener
    	final Object source = event.getSource();
    	if (source.equals(btnJabberConnect)) {
        	if (btnJabberConnect.getText().contains("Disconnect")) {
        		disconnect();
        	} else {
        		connect();
        	}
        } else if (source.equals(mnuJabberConnect)) {
        	connect();
        } else if (source.equals(mnuJabberDisconnect)) {
        	disconnect();
        }
    	Super(ActionEvent).actionPerformed(event);
    }

    public void connect() {
    	mnuJabberConnect.setEnabled(false);
        // Read the account/password from the setting here
		
		try {
			String username = this.modul.getSetting().getOptionAsString(IMPreferences.FEATURE_NAME, "JabberUsername");
			String password = TextCoding.rot48(this.modul.getSetting().getOptionAsString(IMPreferences.FEATURE_NAME, "JabberPassword"));
			String domain = this.modul.getSetting().getOptionAsString(IMPreferences.FEATURE_NAME, "JabberDomain");
			String resource = this.modul.getSetting().getOptionAsString(IMPreferences.FEATURE_NAME, "JabberResource");
			this.jabCon.connect(username, password, domain, resource);
			this.jabCon.getConnection().addPacketListener(this.tabManager, new PacketTypeFilter(Message.class));
		} catch (XMPPException e) {
			System.err.println("Jabber connection error:");
			System.err.println(e.getMessage());
			disconnect();
		} catch (SettingException e) {
			System.err.println("Error! Setting exception:");
			System.err.println(e.getMessage());
		}
		btnJabberConnect.setText("Disconnect from Jabber");
		mnuJabberDisconnect.setEnabled(true);
    }
    
    public void disconnect() {
    	mnuJabberDisconnect.setEnabled(false);
        // Read the account/password from the setting here
		
		try {
			this.jabCon.disconnect();
		} catch (XMPPException e) {
			System.err.println("Jabber connection error:");
			System.err.println(e.getMessage());
		}
		
		btnJabberConnect.setText("Connect to Jabber");
		mnuJabberConnect.setEnabled(true);
    }
    
    protected DefaultMutableTreeNode createRosterTree(DefaultMutableTreeNode rosterRoot) {
     	// This is because somehow this method is called before this class is created...
		if (jabCon == null) {	
			jabCon = new JabberConnection(this.base);
			jabCon.getJabberRoster().addLineListener(this);
		}
		
    	rosterRoot.add(jabCon.getJabberRoster().getJabberRosterRoot());
    	return rosterRoot;    	
    }
    
    public void rosterChanged() {
    	try {
    		this.contactTree.updateUI();
    	} catch (Exception e) {
    		System.err.println("Error in rosterChanged()");
    	}
    }
    
    protected void createNewTab(TreePath buddyPath) {
    	if (!buddyPath.getPath()[1].toString().equals("Jabber") || buddyPath.getPath().length <= 3) {
    		Super(TreePath).createNewTab(buddyPath);
    		return;
    	}
    	
		// Get the buddy
		DefaultMutableTreeNode node = (DefaultMutableTreeNode)buddyPath.getPath()[buddyPath.getPath().length - 1];
    	IMBuddy buddy = (IMBuddy)node.getUserObject(); 
		createNewTab(buddy);
    }
    
    public void createNewTab(IMBuddy buddy) {
    	buddy.setChat(this.jabCon.getConnection().getChatManager().createChat(buddy.getUID(), new JabberListener()));
		this.tabManager.addRoom(buddy);
    }
    
    protected void sendMessage(String to, String msg) {
    	try {
	    	Chat chat = this.jabCon.getConnection().getChatManager().createChat(to, new JabberListener());
	    	chat.sendMessage(msg);
	    } catch (XMPPException e) {
	    	System.err.println("Error sending message to " + to);
	    	return;
	    }
	    ChatPanel panel = this.tabManager.getPanel(this.tabManager.getActiveRoom());
	    String user = this.jabCon.getConnection().getUser();
    	panel.addMessage(user.substring(0, user.indexOf('/')), msg);
    }
}