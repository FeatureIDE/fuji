import java.awt.Desktop;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.URI;
import javax.swing.Icon;
import javax.swing.JLabel;

/**
 * @author Marcel Jaeschke
 * @since 1.6
 */
public class JLinkLabel extends JLabel implements MouseListener {
	/**
	 * Serial number
	 */
	private static final long serialVersionUID = 7208073849107391153L;
	private URI uri = null;
	private String text;

	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel()
	 */
	public JLinkLabel () {
		super();
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel(javax.swing.Icon,int)
	 */
	public JLinkLabel ( Icon image, int horizontalAlignment ) {
		super( image, horizontalAlignment );
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel(javax.swing.Icon)
	 */
	public JLinkLabel ( Icon image ) {
		super( image );
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel(java.lang.String,javax.swing.Icon,int)
	 */
	public JLinkLabel ( String text, Icon icon, int horizontalAlignment ) {
		super( text, icon, horizontalAlignment );
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel(java.lang.String,int)
	 */
	public JLinkLabel ( String text, int horizontalAlignment ) {
		super( text, horizontalAlignment );
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#JLabel(java.lang.String)
	 */
	public JLinkLabel ( String text ) {
		super( text );
		addMouseListener( this );
	}
	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
	 */
	public void mouseClicked ( MouseEvent e ) {
		if ( this.uri != null ) {
			try {
				if ( this.uri.getScheme().equals( "mailto" ) ) {
					Desktop.getDesktop().mail( this.uri );
				} else if ( this.uri.getScheme().startsWith( "http" ) ) {
					Desktop.getDesktop().browse( this.uri );
				} else {
					System.err.println( this.uri + " is not supported" );
				}
			} catch ( IOException e1 ) {
				e1.printStackTrace();
			}
		}
	}
	/**
	 * Returns the uri which will be followed on a click.
	 * @return The uri which will be followed on a click.
	 */
	public URI getUri () {
		return this.uri;
	}
	/**
	 * Set the uri which will be followed on a click.
	 * @param uri The uri which will be followed on a click.
	 */
	public void setUri ( URI uri ) {
		this.uri = uri;
		setText( this.text );
	}
	/* (non-Javadoc)
	 * @see javax.swing.JLabel#setText(java.lang.String)
	 */
	public void setText ( String text ) {
		this.text = text;
		if ( this.uri == null ) {
			super.setText( text );
		} else {
			super.setText( String.format( "<html><body><a href=\"%s:%s\">%s</a></body></html>", this.uri.getScheme(), this.uri.getSchemeSpecificPart(), this.text ) );
		}
	}
	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
	 */
	public void mouseEntered ( MouseEvent e ) {
		setCursor( new Cursor( Cursor.HAND_CURSOR ) );
	}
	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
	 */
	public void mouseExited ( MouseEvent e ) {}
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
	 */
	public void mousePressed ( MouseEvent e ) {}
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
	 */
	public void mouseReleased ( MouseEvent e ) {}
}
