import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;

public class IMView extends ModelView implements MouseListener, KeyListener {
    protected final JMenuItem miPreferences = new JMenuItem( ProgramImages.PREFERENCES );
    protected DefaultMutableTreeNode rosterRoot;
    protected JTree contactTree;
    protected IMTabs tabManager;
    protected JTextField txtInputField = new JTextField();
    protected InstantMessenger modul;
    protected Devolution base;
    
    /**
     * Default constructor.
     * 
     * @param modul The modul which use the viewer.
     */
    public IMView ( final Modul modul, final Devolution base ) {
        super( modul );
        this.base = base;
        this.modul = (InstantMessenger)modul;
        initView();
        this.lbStatusbar.setText( "Instant Messenger" );
    }

    public JComponent initMainContent () {
    	this.tabManager = new IMTabs(this);
        getMainContent().add( this.tabManager.getPane(), BorderLayout.CENTER );
        getMainContent().add(this.txtInputField, BorderLayout.SOUTH);
        this.txtInputField.addKeyListener(this);
        return this.coContent;
    }

    public JMenu initMenu () {
        this.mnMenu.addSeparator();
        this.miPreferences.addActionListener( this );
        this.mnMenu.add( this.miPreferences );
        return this.mnMenu;
    }

    public PreferencesEntry initPreferences () {
        this.preferences = new IMPreferences( (InstantMessenger) this.modul );
        return this.preferences;
    }

    public JComponent initSidepanel() {
    	rosterRoot = new DefaultMutableTreeNode("Instant Messenging");
    	this.contactTree = new JTree(createRosterTree(rosterRoot));
    	this.contactTree.addMouseListener(this); // To detect double clicks
    	this.contactTree.setRootVisible(false);
        this.coSidepanel = this.contactTree;        
        return this.coSidepanel;
    }
    
    protected DefaultMutableTreeNode createRosterTree(DefaultMutableTreeNode root) {
    	// Protocols refine me here
		return root;
    }

    public JComponent initToolbar () {
		// Protocols refine me here
		return this.tbToolbar;
    }
    
    protected void createNewTab(TreePath buddyPath) {
    	// Protocols refine me here
    }
    
    protected void sendMessage(String to, String msg) {
    	// Protocols refine me here
    }
    
    public void changeLanguage () {
        this.miPreferences.setText( "Preferences" );
        // TODO Hier müssen alle sprachabhänigen Strings gesetzt werden
    }
    
	public void expandAll(JTree tree) {
		int row = 0;
		while (row < tree.getRowCount()) {
			tree.expandRow(row);
			row++;
		}
	}

    public void actionPerformed ( final ActionEvent event ) {
        final Object source = event.getSource();
        if ( this.miPreferences.equals( source ) ) {
            new PreferencesDialog( this.modul.getBase(), this.modul.getBase().getView(), new TreePath( this.preferences ) );
        } else {
            super.actionPerformed( event );
        }
    }

	// Mouse listener for double clicks
	public void mousePressed(MouseEvent e) {
         if ( e != null && e.getClickCount() == 2) {
         	TreePath selPath = this.contactTree.getPathForLocation(e.getX(), e.getY());
         	if (selPath != null) {
				createNewTab(selPath);
			}
		}
    }
	public void	mouseEntered(MouseEvent e) {}
 	public void	mouseExited(MouseEvent e) {}
	public void	mouseClicked(MouseEvent e) {}
 	public void	mouseReleased(MouseEvent e) {}
 	
 	// Key listener for return (message sending)
	public void	keyPressed(KeyEvent e) {
		if ( e.getKeyCode() == KeyEvent.VK_ENTER ) {
			sendMessage(this.tabManager.getActiveRoom(), this.txtInputField.getText());
			this.txtInputField.setText("");
		}
	}
 	public void	keyReleased(KeyEvent e) {}
 	public void	keyTyped(KeyEvent e) {}
    
}
