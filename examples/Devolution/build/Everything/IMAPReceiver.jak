layer Everything;import java.io.File;
import java.io.InputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Properties;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.InternetAddress;

SoUrCe RooT IMAP "../../../H:/Devolution/src/IMAP/IMAPReceiver.jak";


public class IMAPReceiver implements Receiver{

    private String imapServer;
    private String user;
    private Store store = null;
    private Folder folder = null;
    private Message[] msgs;
    private Properties props;

    public IMAPReceiver(String accountName){
		Account acc = new Account(accountName);
		props = acc.getProperties();
	    imapServer = props.getProperty("imapServer");
		user = props.getProperty("userReceive");
    }

    public void receive(){
	try{
	    Properties props = new Properties();

	    Session session = Session.getInstance(props, null);
		store = session.getStore("imap");
	    store.connect(imapServer,user, TextCoding.rot48(this.props.getProperty("password")));
	    folder = store.getDefaultFolder();
	    if (folder == null) throw new Exception("No default folder");
	    folder = folder.getFolder("INBOX");	    
	    if (folder == null) throw new Exception("No IMAP INBOX");
	    folder.open(Folder.READ_ONLY);

	    msgs = folder.getMessages();

	} catch (Exception ex1){
		System.out.println(ex1.toString());
	    try{
			if (folder!=null) folder.close(false);
			if (store!=null) store.close();
	    } catch (Exception ex2){System.out.println(ex2.toString());}
	}
    }

    public void close(){
	try{
	    if (folder!=null) folder.close(false);
	    if (store!=null) store.close();
	} catch (Exception ex){}
    }

    public void finalize(){
	try{
	    if (folder!=null) folder.close(false);
	    if (store!=null) store.close();
	} catch (Exception ex){}
	try{
	    super.finalize();
	} catch (Throwable t){}
    }


    public int getMessageCount(){
	if(msgs!=null) return msgs.length;
	return -1;
    }

    public LinkedList getMessageProperties(int n){

	if(msgs==null) return null;
	if(n<1 || n>msgs.length) return null;
	LinkedList props = new LinkedList();

	try{
	    String from =((InternetAddress)msgs[n-1].getFrom()[0]).getPersonal();
	    if (from==null) from =((InternetAddress)msgs[n-1].getFrom()[0]).getAddress();
	    String subject = msgs[n-1].getSubject();
	    String date = "";
	    if( msgs[n-1].getSentDate() != null )
	    	date = msgs[n-1].getSentDate().toString();

	    props.add(subject);
	    props.add(from);
	    props.add(date);
	} catch (Exception e) {System.out.println(e.toString());}

	return props;
    }

    public String getTextContent(int n){
	if(msgs==null) return null;
	if(n<1 || n>msgs.length) return null;
	return getTextContent(msgs[n-1]);
    }

    public LinkedList getFileAttachments(int n){
	if(msgs==null) return null;
	if(n<1 || n>msgs.length) return null;
	return getFileAttachments(msgs[n-1]);
    }

    public void saveFile(int n, int fileNumber, String destination){
	if(msgs==null) return;
	if(n<1 || n>msgs.length) return;
	saveFile(msgs[n-1], fileNumber, destination);
	return;
    }


    private static String getTextContent(Message msg){

	String textContent = "";
	try{
	    Part messagePart = msg;
	    Object content = messagePart.getContent();

	    if (content instanceof Multipart){
		int n = ((Multipart)content).getCount();

		for(int i=0; i<n; i++ ){
		    messagePart =((Multipart)content).getBodyPart(i);
		    String contentType = messagePart.getContentType();

		    if (startsWithIgnoreCase(contentType,"text/plain") || 
			    startsWithIgnoreCase(contentType,"text/html")){

			InputStream is = messagePart.getInputStream();
			textContent = textContent + saveToString(is);
		    }

		    if (startsWithIgnoreCase(contentType,"multipart/alternative")){
			messagePart =((Multipart)messagePart).getBodyPart(0);
			InputStream is = messagePart.getInputStream();
			textContent = textContent + saveToString(is);
		    }

		    if (startsWithIgnoreCase(contentType,"multipart/mixed")){
			messagePart =((Multipart)messagePart).getBodyPart(0);
			InputStream is = messagePart.getInputStream();
			textContent = textContent + saveToString(is);
		    }
		}

	    }
	    else{
		String contentType = messagePart.getContentType();
		if (startsWithIgnoreCase(contentType,"text/plain") || 
			startsWithIgnoreCase(contentType,"text/html")){

		    InputStream is = messagePart.getInputStream();
		    textContent = textContent + saveToString(is);
		}
	    }
	}
	catch(Exception ex){}

	return textContent;
    }

    private static LinkedList getFileAttachments(Message msg){

	LinkedList files = new LinkedList();
	try{
	    Part messagePart = msg;
	    Object content = messagePart.getContent();

	    if (content instanceof Multipart){
		int n = ((Multipart)content).getCount();

		for(int i=0; i<n; i++ ){
		    messagePart =((Multipart)content).getBodyPart(i);
		    String contentType = messagePart.getContentType();
		    if (startsWithIgnoreCase(contentType,"multipart/mixed")){
			Object messagePart2 = messagePart.getContent();
			int m = ((Multipart) messagePart2).getCount();
			for(int j=1; j<m; j++){
			    Part messagePart3 =((Multipart)messagePart2).getBodyPart(j);
			    files.add(messagePart3.getFileName());
			}
		    }

		    if (startsWithIgnoreCase(contentType,"application") ||
			    startsWithIgnoreCase(contentType,"text/xml") || 
			    startsWithIgnoreCase(contentType,"text/x-objcsrc")){

			files.add(messagePart.getFileName());
		    }
		}
	    }
	    else{
		String contentType = messagePart.getContentType();				
		if (startsWithIgnoreCase(contentType,"application") ||
			startsWithIgnoreCase(contentType,"text/xml") || 
			startsWithIgnoreCase(contentType,"text/x-objcsrc")){
		    files.add(messagePart.getFileName());
		}
	    }
	}
	catch(Exception ex){}

	return files;
    }

    /**
     * Saves a file from the message to the given destination.
     * 
     * @param msg - The message object.
     * @param number - The number of the file to be saved starting at 1. Has to be -1 to save all files.
     * @param destination - The full systempath to the destination.
     */
    private static void saveFile(Message msg, int number, String destination){

	try{
	    File folder = new File(destination);
	    if(folder == null || !folder.isDirectory())
		throw new Exception("The destination is no valid directory.");

	    int numberOfFile = 0;
	    Part messagePart = msg;
	    Object content = messagePart.getContent();

	    if (content instanceof Multipart){
		int n = ((Multipart)content).getCount();

		for(int i=0; i<n; i++ ){
		    messagePart =((Multipart)content).getBodyPart(i);
		    String contentType = messagePart.getContentType();

		    if (startsWithIgnoreCase(contentType,"multipart/mixed")){
			Object messagePart2 = messagePart.getContent();
			int m = ((Multipart) messagePart2).getCount();
			for(int j=1; j<m; j++){
			    Part messagePart3 =((Multipart)messagePart2).getBodyPart(j);
			    numberOfFile++;
			    if(number==-1 || number == numberOfFile){
				InputStream is = messagePart3.getInputStream();
				File file = new File(destination + messagePart3.getFileName());
				saveToFile(file,is);
			    }
			}
		    }

		    if (startsWithIgnoreCase(contentType,"application") ||
			    startsWithIgnoreCase(contentType,"text/xml") || 
			    startsWithIgnoreCase(contentType,"text/x-objcsrc")){
			numberOfFile++;
			if(number==-1 || number == numberOfFile){
			    InputStream is = messagePart.getInputStream();
			    File file = new File(destination + messagePart.getFileName());
			    saveToFile(file,is);
			}
		    }
		}
	    }
	    else{
		String contentType = messagePart.getContentType();				
		if (startsWithIgnoreCase(contentType,"application") ||
			startsWithIgnoreCase(contentType,"text/xml") || 
			startsWithIgnoreCase(contentType,"text/x-objcsrc")){
		    numberOfFile++;
		    if(number==-1 || number == numberOfFile){
			InputStream is = messagePart.getInputStream();
			File file = new File(destination + messagePart.getFileName());
			saveToFile(file,is);
		    }
		}
	    }
	}
	catch(Exception ex){}
    }

    /**
     * Saves the data from an InputStream to the file.
     * 
     * @param file
     * @param is
     */
    private static void saveToFile(File file, InputStream is) throws Exception{
	if(file.exists()){
	    System.err.println(file.getName() + " allready exists. Remove the old file or give a new destination.");
	    return;
	}
	BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(file));
	byte[] buffer = new byte[32 * 1024];
	int bytesRead = 0;
	while ((bytesRead = is.read(buffer)) != -1)
	    os.write(buffer, 0, bytesRead);
	os.close();
    }

    /**
     * Saves the content of an InputStream into a String.
     * 
     * @param is
     * @return content
     */
    private static String saveToString(InputStream is) throws Exception{
	String content = "";
	BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	String line = reader.readLine();
	while (line!=null){
	    content = content + line + "\n";
	    line=reader.readLine();
	}
	return content;
    }

    private static boolean startsWithIgnoreCase(String string, String prefix){

		if(string.length() < prefix.length()) return false;
		String realPrefix = string.substring(0, prefix.length());
		return realPrefix.equalsIgnoreCase(prefix);
	}
}