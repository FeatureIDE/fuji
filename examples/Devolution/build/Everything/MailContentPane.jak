layer Everything;import java.io.File;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

SoUrCe RooT MailBase "../../../H:/Devolution/src/MailBase/MailContentPane.jak";


public class MailContentPane extends JSplitPane implements ListSelectionListener, ActionListener{


    private static final long serialVersionUID = 1L;
    private JScrollPane tablePanel;
    private JTable table;
    private JPanel contentPanel;
    private JTextArea text;
    private JPanel images;
    private LinkedList buttons;
    private String account;
    private String protocol;
    private JProgressBar pbStatusbar;


    public MailContentPane(String account){
    	Super(int)(JSplitPane.VERTICAL_SPLIT);

    	if(account == null){
    		createPane();
    		return;
    	}

    	this.account = account;
		Account acc = new Account(account);
		Properties props = acc.getProperties();
	    protocol = props.getProperty("receiveProtocol");
    	createPane();
    }

	public void setProgressBar( JProgressBar bar){
		this.pbStatusbar = bar;
	}

    private void createPane(){

		tablePanel = new JScrollPane();
		tablePanel.setPreferredSize(new Dimension(300,150));
		table = new JTable(new DefaultTableModel());
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.getSelectionModel().addListSelectionListener(this);
		((DefaultTableModel)table.getModel()).addColumn("Betreff");
		((DefaultTableModel)table.getModel()).addColumn("Sender");
		((DefaultTableModel)table.getModel()).addColumn("Datum");
		tablePanel.getViewport().add(table);
		this.setTopComponent(tablePanel);
	
		contentPanel = new JPanel();
		contentPanel.setLayout(new BorderLayout());
		text = new JTextArea();
		text.setEditable(false);
		JScrollPane textPane = new JScrollPane();
		textPane.getViewport().add(text);
		contentPanel.add(textPane,BorderLayout.CENTER);
	
		JScrollPane pane = new JScrollPane();
		contentPanel.add(pane,BorderLayout.SOUTH);
		images = new JPanel();
		FlowLayout layout1 = new FlowLayout();
		layout1.setAlignment(FlowLayout.LEFT);
		layout1.setHgap(10);
		images.setLayout(layout1);
		pane.getViewport().add(images);
	
		this.setBottomComponent(contentPanel);
		this.setDividerLocation(0.5);
		this.validate();
    }

    public void insertMessages(){
		table.setEnabled(false);
		Receiver receiver = null;
		if (protocol.equalsIgnoreCase("pop3"))
			receiver = new POP3Receiver(account);
		else
		if (protocol.equalsIgnoreCase("imap"))
			receiver = new IMAPReceiver(account);

		receiver.receive();

		int messageCount = receiver.getMessageCount();
		this.pbStatusbar.setMinimum(0);
		this.pbStatusbar.setMaximum(messageCount);

		for (int i=1; i<=messageCount; i++){
			LinkedList props = receiver.getMessageProperties(i);
			Vector newRow = new Vector();
			newRow.add(props.get(0));
			newRow.add(props.get(1));
		    newRow.add(props.get(2));

		    ((DefaultTableModel)table.getModel()).addRow(newRow);

			this.pbStatusbar.setValue(i);
			this.pbStatusbar.paintImmediately(this.pbStatusbar.getVisibleRect());

			table.scrollRectToVisible(table.getCellRect(i-1,0,true));
		}

		receiver.close();
		table.setEnabled(true);
    }

    public void insertContent(){
    	Receiver receiver = null;
    	if (protocol.equalsIgnoreCase("pop3"))
			receiver = new POP3Receiver(account);
		else
		if (protocol.equalsIgnoreCase("imap"))
			receiver = new IMAPReceiver(account);

		receiver.receive();

		text.setText(receiver.getTextContent(table.getSelectedRow()+1));
		LinkedList fileNames = receiver.getFileAttachments(table.getSelectedRow()+1);
		receiver.close();
		buttons = new LinkedList();
	
		try{
		    for(int i=0; i<fileNames.size(); i++){
			String name = (String)fileNames.get(i);
			int posOfDot = name.lastIndexOf(".");
			String prefix = name.substring(0,posOfDot);
			String postfix = name.substring(posOfDot+1);
	
			File tmpFile = File.createTempFile(prefix, "."+postfix);
			final Icon icon = FileSystemView.getFileSystemView().getSystemIcon(tmpFile);
			tmpFile.delete();
	
			if(prefix.length() > 7) prefix = prefix.substring(0,6) + "_";
			String text = prefix + "." + postfix;
	
			JButton button = new JButton();
			button.setToolTipText("Save " + name);
			button.setIcon(icon);
			button.setText(text);
			button.addActionListener(this);
			images.add(button);
			buttons.add(button);
			this.validate();
		    }
		} catch (Exception e){}
    }

	public void refresh(){
		Receiver receiver = null;
		if (protocol.equalsIgnoreCase("pop3"))
			receiver = new POP3Receiver(account);
		else
		if (protocol.equalsIgnoreCase("imap"))
			receiver = new IMAPReceiver(account);
		receiver.receive();

		int messageCount = receiver.getMessageCount();

		if (messageCount > table.getRowCount()){
			this.pbStatusbar.setMinimum(0);
			this.pbStatusbar.setMaximum(messageCount - table.getRowCount());

			for (int i=table.getRowCount()+1; i<=messageCount; i++){

			    LinkedList props = receiver.getMessageProperties(i);
			    Vector newRow = new Vector();
			    newRow.add(props.get(0));
			    newRow.add(props.get(1));
			    newRow.add(props.get(2));

			    ((DefaultTableModel)table.getModel()).addRow(newRow);
			    this.pbStatusbar.setValue(i);
				this.pbStatusbar.paintImmediately(this.pbStatusbar.getVisibleRect());			    
			}
		}
		receiver.close();

		table.scrollRectToVisible(table.getCellRect(messageCount-1,0,true));
		this.validate();
		this.repaint();
	}

    public void valueChanged(ListSelectionEvent e) {
		if(e.getValueIsAdjusting() == false){
		    table.setEnabled(false);
		    images.removeAll();
		    this.validate();
		    insertContent();
		    table.setEnabled(true);
		}
    }

    public void actionPerformed(ActionEvent e) {

		Object source = e.getSource();
		if(source instanceof JButton){
		    for(int i=0; i<buttons.size(); i++){
				if(buttons.get(i) == source){
				    JFileChooser fc = new JFileChooser();
				    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				    int result = fc.showDialog(this,"Save");
				    if(result == JFileChooser.APPROVE_OPTION){
						Receiver receiver = null;
				    	if (protocol.equalsIgnoreCase("pop3"))
							receiver = new POP3Receiver(account);
						if (protocol.equalsIgnoreCase("imap"))
							receiver = new IMAPReceiver(account);
						receiver.receive();
						try{
						    int message = table.getSelectedRow()+1;
						    int file = i+1;
						    String destination = fc.getSelectedFile().getCanonicalPath() + "/";
						    receiver.saveFile(message, file, destination);
						} catch (Exception ex){}
						receiver.close();
					}
				    return;
				}
		    }
		}
    }

    public static void main(String[] args){
    	new MailContentPane("###");
    }
}