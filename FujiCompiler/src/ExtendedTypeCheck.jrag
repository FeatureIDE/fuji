/* Extended Type Check
 * 2012-04-14
 * 
 * IMPORTANT: 
 * add jar de.ovgu.featureide.fm.core...jar (FM-Test 03)
 * to Fuji's build-path
 * 
 * for tests (TestSuite.java):
 * add org.eclipse.equinox.common...jar (FM-Test 03)
 * add jakarta.jar (FM-Test 03)
 * add guidsl.jar (FM-Test 03)
 * add org.sat4j.core.jar (FM-Test 03)
 * to Fujis's build-path
 * 
 * This aspect extends the JastAddJ's type check:
 * (VarAccess.splTypeCheck())
 * - checks, if one feature tries to access a field of a second feature 
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * - when two or more features provide an implementation for a type and 
 *   all of them are optional, then it would be possible, that no implementation
 *   of the type is present. 
 * (MethodAccess.splTypeCheck())
 * - checks, if one feature tries to access a method of a second feature
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * - when two or more features provide an implementation for a type and 
 *   all of them are optional, then it would be possible, that no implementation
 *   of the type is present.
 * (TypeAccess.splTypeCheck())
 * - collect all type accesses and check, if all required types are present
 *   in at least one feature each
 *   - types, classes, interfaces, Generics, (try, catch, throw)
 *   - Cast, Constructor,
 *   - 4 types of inner classes (static, member, local, anonymous)
 */

import de.ovgu.featureide.fm.core.FeatureModel;
import de.ovgu.featureide.fm.core.Feature;
import de.ovgu.featureide.fm.core.FeatureDependencies;
import de.ovgu.featureide.fm.core.io.guidsl.GuidslReader;
import de.ovgu.featureide.fm.core.io.UnsupportedModelException;

import org.sat4j.specs.TimeoutException;

import fuji.TypeErrorInfo;

aspect ExtendedTypeCheck {

	/* the feature model */
	protected static FeatureModel ASTNode.featureModel;

	public FeatureModel ASTNode.getFeatureModel() {
		return featureModel;
	}

	public void ASTNode.setFeatureModel(FeatureModel model) {	
		featureModel = model;
	}
	
	/* collect all TypeAccesses in Map 
	 * format: map: fromFeatureID, map: name of needed type and TypeErrorInfo
	 * (list of toFeatureIDs, that implement this type and source file name
	 * and line number of type accesses of this type) */
	protected static HashMap<Integer, HashMap<String, TypeErrorInfo>> 
	    ASTNode.typeAccesses = 
	    new HashMap<Integer, HashMap<String, TypeErrorInfo>>();
	
	/* for type accesses */
	protected ArrayList Program.errors = new ArrayList();
	
	/* for type accesses */
	protected ArrayList Program.warnings = new ArrayList();
	
	/* report a type error */
	public void ASTNode.typeError(String accessSourceInfo, String msg) {
		ASTNode node = this;
		while(node != null && !(node instanceof Program))
			node = node.getParent();
		Program pr = (Program)node;
			pr.errors.add(new Problem(accessSourceInfo, msg, 
					Problem.Severity.ERROR, Problem.Kind.SEMANTIC));
	}
	
	/* line numbers included in fileName */
    public Problem.Problem(String fileName, String message, Severity severity, Kind kind) {
        this(fileName, message);
        this.kind = kind;
        this.severity = severity;
    }

	/* (fromFeature ALWAYS toFeature) due to feature model */
	protected boolean ASTNode.always(FeatureDependencies dep, 
			Feature fromFeature, 
			Feature toFeature) {		  	  
		return dep.always(fromFeature).contains(toFeature);
	}

	/* (fromFeature NEVER toFeature) due to feature model */
	protected boolean ASTNode.never(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.never(fromFeature).contains(toFeature);
	}

	/* (fromFeature MAYBE toFeature) due to feature model */
	protected boolean ASTNode.maybe(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.maybe(fromFeature).contains(toFeature);
	}
	
	/* collect Type Errors */
	public void ASTNode.collectSplTypeErrors() {
		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/* TODO: werden hierdurch ALLE benoetigten Features in der 
		 * richtigen REIHENFOLGE eingelesen? */
		listFeatures.addAll(featureModel.getConcreteFeatures());
		
		/* for all fromFeatureIDs */
		for (int i : typeAccesses.keySet()) {
			Feature fromFeature = featureModel.getFeature(listFeatures
					.get(i).getName());
			/* Feature needs types */
			if (!(typeAccesses.get(i).isEmpty())) {			
				HashMap<String, TypeErrorInfo> typeNamesAndInfo = typeAccesses.get(i);
							
				/* list qualified names of needed types ... */
				for(String td : typeNamesAndInfo.keySet()) {
					/* list of IDs of features, that implement this type */
					HashSet<Integer> toFeatureIDs = typeNamesAndInfo.get(td).getToFeatureIDs();
					
					/* only one implementation */
					if(toFeatureIDs.size() == 1) {
						addSplErrors(i, toFeatureIDs.iterator().next(), "auf den Typ", td, true);
				    /* more than one implementation */
					} else if(toFeatureIDs.size() > 1) {
						HashMap<Integer, String> mapDecls = new HashMap<Integer, String>();
						for(int toFeatureID : toFeatureIDs) {
							mapDecls.put(toFeatureID, td);
						}
						addSplErrors(i, toFeatureIDs, "auf den Typ", mapDecls, true);
					}
				}
			}
		}
	}

	
	/* copied from ErrorCheck.jrag and modified: added "spl" or "Spl" 
	 * in front of method names or in method names
	 * added: FeatureModel in ASTNode
	 * TODO: get sure, that the featureModel is properly initiated.
	 */

	/* */
	public void ASTNode.collectSplErrors() {
		splTypeCheck();
		for(int i = 0; i < getNumChild(); i++) {
			getChild(i).collectSplErrors();
		}
	}
	
	public void Program.splErrorCheck(FeatureModel model, Collection collection) {
		setFeatureModel(model);
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
			}
		}
		collectSplTypeErrors();
		collection.addAll(errors);
	}

	public void Program.splErrorCheck(FeatureModel model, Collection collection, Collection warn) {	
		setFeatureModel(model);
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
				warn.addAll(cu.warnings);
			}
		}
		collectSplTypeErrors();
		collection.addAll(errors);
		warn.addAll(warnings);
	}

	public void CompilationUnit.splErrorCheck(FeatureModel model, Collection collection) {
		setFeatureModel(model);
		collectSplErrors();
		collection.addAll(errors);
	}

	public void CompilationUnit.splErrorCheck(FeatureModel model, Collection err, Collection warn) {		
		setFeatureModel(model);
		collectSplErrors();
		err.addAll(errors);
		warn.addAll(warnings);
	}

	public boolean Program.splErrorCheck(FeatureModel model) {		
		Collection collection = new LinkedList();
		splErrorCheck(model, collection);
		if(collection.isEmpty()) {
			return false;
		}
		System.out.println("SPL Errors:");
		for(Iterator iter = collection.iterator(); iter.hasNext(); ) {
			String s = (String)iter.next();
			System.out.println(s);
		}
		return true;
	}

	/* /copy_&_modify */

	/* Ausgabe von Fehlern bei nur einem Zielfeature */
	public void ASTNode.addSplErrors(int fromFeatureID,
			int toFeatureID, String targetStructure, String decl, boolean isTypeAccess) {
		FeatureModel model = getFeatureModel();

		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/* TODO: werden hierdurch ALLE benoetigten Features in der 
		 * richtigen REIHENFOLGE eingelesen? */
		listFeatures.addAll(model.getConcreteFeatures());

		/* beide Features vorhanden? */
		if(fromFeatureID != -1 && toFeatureID != -1) {

			/* Wird auf ein anderes Feature zugegriffen? */
			if (!(fromFeatureID == toFeatureID)) {
				/*
				 * Auf Reihenfolge Features aus dem FM zu
				 * Feature(-ID)s aus dem AST achten!
				 */				
				Feature fromFeature = model.getFeature(listFeatures
						.get(fromFeatureID).getName());
				Feature toFeature = model.getFeature(listFeatures
						.get(toFeatureID).getName());					 

				/* Ermittle Abhaengigkeiten aus dem FM */
				FeatureDependencies dep = new FeatureDependencies(model);	 
		
				/* kummulative Ausgabe der Quelldateinamen und Zeilennummern 
				 * fŸr einen Typzugriff aus einem Feature */
				StringBuilder sbtei = new StringBuilder();
				if(isTypeAccess) {
					TypeErrorInfo tei = typeAccesses.get(fromFeatureID).get(decl);
					for(String s : tei.getAccessSourceInfo()) {
						sbtei.append(s);
						sbtei.append("\n");
					}
					sbtei.setLength(sbtei.length() - 1);
				}

				/* fromFeature und toFeature koennen nicht beide gleichzeitig
				 * in einer validen Auswahl vorkommen (never-Beziehung)
				 * -> Fehler
				 */
				if(never(dep, fromFeature, toFeature)) {
					StringBuilder sb = new StringBuilder();
					sb.append("never-Beziehung:");
					sb.append("\nFeature ");
					sb.append(fromFeature.getName());
					sb.append(" greift ");
					sb.append(targetStructure);
					sb.append("\n  ");
					sb.append(decl);
					sb.append("\ndes Features ");
					sb.append(toFeature.getName());
					sb.append(" zu.\n");
					sb.append(fromFeature.getName());
					sb.append(" und ");
					sb.append(toFeature.getName());
					sb.append(" kšnnen aber ");
					sb.append("nicht beide gleichzeitig in einer validen ");
					sb.append("Auswahl vorkommen.\n");
					if(isTypeAccess) {						
						typeError(sbtei.toString(), sb.toString());
					} else {
						error(sb.toString());
					}
				}

				/* toFeature kann, muss aber nicht in einer validen Auswahl
				 * vorkommen (maybe-Beziehung) -> moegliche Fehlerquelle
				 */
				if(maybe(dep, fromFeature, toFeature)) {				
					StringBuilder sb = new StringBuilder();
					sb.append("maybe-Beziehung:");
					sb.append("\nFeature ");
					sb.append(fromFeature.getName());
					sb.append(" greift ");
					sb.append(targetStructure);
					sb.append("\n  ");
					sb.append(decl);
					sb.append("\ndes Features ");
					sb.append(toFeature.getName());
					sb.append(" zu.\n");
					sb.append("Das Ziel-Feature ist aber nicht in jeder ");
					sb.append("mšglichen validen Auswahl vorhanden.\n");
					if(isTypeAccess) {
						typeError(sbtei.toString(), sb.toString());
					} else {
						error(sb.toString());
					}
				}
			}
		}		
	}

	/* Ausgabe von Fehlern bei mehreren Zielfeatures */
	public void ASTNode.addSplErrors(int fromFeatureID,
			HashSet<Integer> toFeatureIDs, String targetStructure, 
			HashMap<Integer, String> mapDecls, boolean isTypeAccess) {
		FeatureModel model = getFeatureModel();

		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/* TODO: werden hierdurch ALLE benoetigten Features in der 
		 * richtigen REIHENFOLGE eingelesen? */
		listFeatures.addAll(model.getConcreteFeatures());
		Feature fromFeature = model.getFeature(listFeatures
				.get(fromFeatureID).getName());

		/* Liste einer Menge von Zielfeatures */
		ArrayList<Set<Feature>> toFeaturesList = new ArrayList<Set<Feature>>();
		for (int toFeatureID : toFeatureIDs) {
			Feature toFeature = model.getFeature(listFeatures.get(toFeatureID).getName());
			HashSet<Feature> toFeatureSet = new HashSet<Feature>();
			toFeatureSet.add(toFeature);
			toFeaturesList.add(toFeatureSet);
		}

		/* for TypeAccess: list all source files and line numbers,
		 * where a TypeAccess to a specific type takes place */
		StringBuilder sbtei = new StringBuilder();
		if(isTypeAccess) {
			TypeErrorInfo tei = typeAccesses.get(fromFeatureID).get(mapDecls.get(mapDecls.keySet().iterator().next()));
			for(String s : tei.getAccessSourceInfo()) {
				sbtei.append(s);
				sbtei.append("\n");
			}
			sbtei.setLength(sbtei.length() - 1);
		}

		HashSet<Feature> accessingFeature = new HashSet<Feature>();
		accessingFeature.add(fromFeature);

		try {
			/* alle Features optional, aufrufendes Feature ist gesetzt */
			if (model.mayBeMissing(accessingFeature, toFeaturesList)) {	
				StringBuilder sb = new StringBuilder();
				sb.append(toFeatureIDs.size());
				sb.append(" optionale Ziele ");
				sb.append("(es kann eine valide Auswahl geben, "
						+ "in der alle diese Ziele nicht vorhanden sind):\n");
				sb.append("Feature ");
				sb.append(fromFeature.getName());
				sb.append(" zielt ");
				sb.append(targetStructure);
				sb.append(" folgender Features:\n");
				for (int toFeatureID : toFeatureIDs) {
					sb.append(model.getFeature(listFeatures.get(toFeatureID).getName()).getName());
					sb.append(":\t");
					String decl = mapDecls.get(toFeatureID);
					sb.append(decl);
					sb.append("\n");
				}
				if(isTypeAccess) {
					typeError(sbtei.toString(), sb.toString());
				} else {
					error(sb.toString());
				}
			}				
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
	}

	public void ASTNode.splTypeCheck() {
		
	}

	public void VarAccess.splTypeCheck() {
		HashMap<Integer, String> mapDecls = new HashMap<Integer, String>();

		/* Ist der Variablenzugriff ein Feldzugriff? */
		if (isFieldAccess()) {			
			int fromFeatureID = featureID();
			SimpleSet decls = decls();
			String decl = decl().toString();
			String declFirstLine = ( decl.indexOf("\n") == -1
					? decl
							: decl.substring(0, decl.indexOf("\n")) + " ... }" );
			/* nur ein Zielfeature */
			if (decls.size() == 1) {
				BodyDecl var = (BodyDecl) decl();
				int toFeatureID = var.featureID();
				addSplErrors(fromFeatureID, toFeatureID, "auf das Feld", 
						declFirstLine, false);
			/* mehrere Zielfeatures */
			} else if(decls.size() > 1) {
				HashSet<Integer> toFeatureIDs = new HashSet<Integer>();
				for(Iterator iter = decls.iterator(); iter.hasNext(); ){
					BodyDecl var = (BodyDecl) iter.next();
					toFeatureIDs.add(var.featureID());
					decl = var.toString();
					declFirstLine = ( decl.indexOf("\n") == -1
							? decl 
									: decl.substring(0, decl.indexOf("\n")) + " ... }" );
					mapDecls.put(var.featureID(), declFirstLine);
				}
				addSplErrors(fromFeatureID, toFeatureIDs, "auf das Feld", 
						mapDecls, false);
			}
		}    
	}

	public void MethodAccess.splTypeCheck() {
		HashMap<Integer, String> mapDecls = new HashMap<Integer, String>();
		int fromFeatureID = featureID();
		ArrayList<MethodDecl> methodDecls = new ArrayList<MethodDecl>();
		
		/*
		 * original-Check: Teste, ob eine Methode "original" heiszt, dann
		 * sollte in diesem Typ (in diesem oder einem anderem Feature) eine
		 * Methode mit gleicher Signatur wie die Aufrufumgebung existieren
		 */

		/*
		 * Methodenaufruf original gefunden, in einem anderen Feature muss im
		 * gleichen Typ eine Methode mit gleicher Signatur wir die Methode des
		 * Aufrufkontexts enthalten sein und das Feature laut Feature-Modell
		 * verfuegbar sein
		 */
		if (name().equals("original")) {
			/* in welcher Methode ist dieser original-Aufruf enthalten? */
			String context = ((MethodDecl) enclosingBodyDecl()).signature();
			/* ermittle im Typ alle Methoden mit gleicher Signatur, 
			 * die aus einem andernen Feature stammen */
			for (BodyDecl bd : hostType().getBodyDecls()) {
				if (bd instanceof MethodDecl) {
					MethodDecl md = (MethodDecl) bd;
					if (md.signature().equals(context)
							&& (md.featureID() != fromFeatureID)) {
						methodDecls.add(md);
					}
				}
			}
			StringBuffer s = new StringBuffer();
			s.append("mittels des original-Aufrufs\n  ");
			s.append(name());
			s.append("(");
			for(int i = 0; i < getNumArg(); i++) {
				if(i != 0)
					s.append(", ");
				s.append(getArg(i).type().typeName());
			}
			s.append(")");
			s.append(" in der Methode " + context + " des Typs " + methodHost());
			s.append(" auf die Methode");
			/* nur eine Methode mit dieser Signatur */
			if (methodDecls.size() == 1) {
				MethodDecl var = methodDecls.get(0);
				int toFeatureID = var.featureID();
				addSplErrors(fromFeatureID, toFeatureID, s.toString(),
						context, false);
				/* mehrere Methoden mit dieser Signatur */
			} else if (methodDecls.size() > 1) {
				HashSet<Integer> toFeatureIDs = new HashSet<Integer>();
				for (Iterator<MethodDecl> iter = methodDecls.iterator(); iter
						.hasNext();) {
					MethodDecl var = iter.next();
					toFeatureIDs.add(var.featureID());
					String decl = var.toString();
				    String declFirstLine = ( decl.indexOf("\n") == -1
						? decl 
								: decl.substring(0, decl.indexOf("\n")) + " ... }" );
				    mapDecls.put(var.featureID(), declFirstLine);
				}
//				addSplErrors(fromFeatureID, toFeatureIDs, s.toString(),
//						"auf die Methode " + context, false);
				addSplErrors(fromFeatureID, toFeatureIDs, s.toString(),
						mapDecls, false);
			}
		} else {
			/* ermittle im Typ alle Methoden mit gleicher Signatur */
			for (BodyDecl bd : decl().hostType().getBodyDecls()) {
				if (bd instanceof MethodDecl) {
					if (((MethodDecl) bd).signature()
							.equals(decl().signature())) {
						methodDecls.add((MethodDecl) bd);
					}
				}
			}
			String decl = decl().toString();
			String declFirstLine = (decl.indexOf("\n") == -1 ? decl : decl
					.substring(0, decl.indexOf("\n")) + " ... }");
			/* nur eine Methode mit dieser Signatur */
			if (methodDecls.size() == 1) {
				MethodDecl var = (MethodDecl) decl();
				int toFeatureID = var.featureID();
				addSplErrors(fromFeatureID, toFeatureID, "auf die Methode",
						declFirstLine, false);
				/* mehrere Methoden mit dieser Signatur */
			} else if (methodDecls.size() > 1) {
				HashSet<Integer> toFeatureIDs = new HashSet<Integer>();
				for (Iterator<MethodDecl> iter = methodDecls.iterator(); iter
						.hasNext();) {
					MethodDecl var = iter.next();
					toFeatureIDs.add(var.featureID());
					decl = var.toString();
				    declFirstLine = ( decl.indexOf("\n") == -1
						? decl 
								: decl.substring(0, decl.indexOf("\n")) + " ... }" );
				    mapDecls.put(var.featureID(), declFirstLine);
				}
				addSplErrors(fromFeatureID, toFeatureIDs, "auf die Methode", 
					mapDecls, false);
			}
		}
	}
	
	public void TypeAccess.splTypeCheck() {				
		/* given for this TypeAccess: fromFeatureID, type name */
		/* collect all TypeAccesses: source feature, type, target feature(s),
		 * source file(s), line number(s) */
		
		int fromFeatureID = getOldParent().featureID();
		FeatureModel model = getFeatureModel();
		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/* TODO: werden hierdurch ALLE benoetigten Features in der 
		 * richtigen REIHENFOLGE eingelesen? */
		listFeatures.addAll(model.getConcreteFeatures());
		
		Feature fromFeature = model.getFeature(listFeatures
				.get(fromFeatureID).getName());
		
		/* test if types from outside (from libraries) are missing */
		/* copied from nameCheck(): */
		if(!(isRaw())) {
			if(isQualified() && !qualifier().isTypeAccess() && !qualifier().isPackageAccess())
				error("can not access the type named " + decl().typeName() + " in this context\n");
			if(decls().isEmpty())
				error(fromFeature.getName() + ": no visible type named " + typeName() + "\n");
			if(decls().size() > 1) {
				StringBuffer s = new StringBuffer();
				s.append("several types named " + name() + ":");
				for(Iterator iter = decls().iterator(); iter.hasNext(); ) {
					TypeDecl t = (TypeDecl)iter.next();
					s.append(" " + t.typeName());
				}
				error(s.toString() + "\n");
			}
		}
		
		/* ignore importDecl */
		if(isRaw()) {
			HashMap<String, TypeErrorInfo> typeNamesAndInfo = typeAccesses.get(fromFeatureID);
			if(typeNamesAndInfo == null) {
				typeNamesAndInfo = new HashMap<String, TypeErrorInfo>();
			}

			/* <package name (default: "(default package)")>.<type name> */
			String qualifiedName = ( decl().hostType().packageName() != "" 
					? decl().hostType().packageName() 
							: "(default package)" ) 
							+ "." 
							+ decl().hostType().name();

			TypeErrorInfo tei = typeNamesAndInfo.get(qualifiedName);
			if(tei == null) {
				tei = new TypeErrorInfo(new HashSet<Integer>(), new HashSet<String>());
			}

			HashSet<Integer> toFeatureIDs = tei.getToFeatureIDs();

			/* find all constructors of this type to get sure that the type
			 * is reachable, but this is not enough: also get sure that
			 * the right constructor is reachable 
			 * --> ClassInstanceExpr.splTypeCheck() */
			ArrayList<ConstructorDecl> constructorDecls = new ArrayList<ConstructorDecl>();
			for(BodyDecl bd : decl().hostType().getBodyDecls()) {
				if (bd instanceof ConstructorDecl) {
					constructorDecls.add((ConstructorDecl) bd);
				}
			}
			/* collect all featureIDs of features, that implement this type,
			 * i.e. that have a constructor for this type */
			for(Iterator iter = constructorDecls.iterator(); iter.hasNext(); ){
				ConstructorDecl var = (ConstructorDecl) iter.next();
				toFeatureIDs.add(var.featureID());
			}

			/* remember source file and line number of type access */
			tei.getAccessSourceInfo().add(sourceFile() + ":" + lineNumber());

			/* default-Typen nicht sammeln */
			if (!(decl().hostType().featureID() == -1)) {
				typeNamesAndInfo.put(qualifiedName, tei);
			}		
			typeAccesses.put(fromFeatureID, typeNamesAndInfo);
		}
	}
	
	public void ClassInstanceExpr.splTypeCheck() {		
		HashMap<Integer, String> mapDecls = new HashMap<Integer, String>();

		int fromFeatureID = featureID();
		ArrayList<ConstructorDecl> constructorDecls = new ArrayList<ConstructorDecl>();

		/* */

		/* ermittle im Typ alle Konstruktoren mit gleicher Signatur */
		for (BodyDecl bd : decl().hostType().getBodyDecls()) {
			if (bd instanceof ConstructorDecl) {
				if (((ConstructorDecl) bd).signature()
						.equals(decl().signature())) {
					constructorDecls.add((ConstructorDecl) bd);
				}
			}
		}
		String decl = decl().toString();
		String declFirstLine = (decl.indexOf("\n") == -1 ? decl : decl
				.substring(0, decl.indexOf("\n")) + " ... }");
		/* nur ein Konstruktor mit dieser Signatur */
		if (constructorDecls.size() == 1) {
			ConstructorDecl var = (ConstructorDecl) decl();
			int toFeatureID = var.featureID();
			addSplErrors(fromFeatureID, toFeatureID, "auf den Konstruktor",
					declFirstLine, false);
			/* mehrere Konstruktoren mit dieser Signatur */
		} else if (constructorDecls.size() > 1) {
			HashSet<Integer> toFeatureIDs = new HashSet<Integer>();
			for (Iterator<ConstructorDecl> iter = constructorDecls.iterator(); iter
					.hasNext();) {
				ConstructorDecl var = iter.next();
				toFeatureIDs.add(var.featureID());
				decl = var.toString();
				declFirstLine = ( decl.indexOf("\n") == -1
						? decl 
								: decl.substring(0, decl.indexOf("\n")) + " ... }" );
				mapDecls.put(var.featureID(), declFirstLine);
			}
			addSplErrors(fromFeatureID, toFeatureIDs, "auf den Konstruktor", 
					mapDecls, false);
		}
	}
	
/*	public void ClassDecl.splTypeCheck(){
		StringBuilder st = new StringBuilder();
		st.append(name() + ": ");
		if (getPreservedSuperClassAccess().isEmpty()) {
			st.append("empty");
		} else {
			for (Access ac : getPreservedSuperClassAccess()) {
				st.append("(" + ac.featureID() + ", " + ac.typeName() + "), ");
			}
			st.setLength(st.length() - 1);
		}
		st.append("\n");
		System.out.println(st.toString());
	}*/
}