/* Extended Type Check
 * 2012-11-17
 * 
 * IMPORTANT: 
 * add jar de.ovgu.featureide.fm.core...jar (FM-Test 03)
 * add org.sat4j.core.jar (FM-Test 03)
 * to Fuji's build-path
 * 
 * for tests (TestSuite.java):
 * add org.eclipse.equinox.common...jar (FM-Test 03)
 * add jakarta.jar (FM-Test 03)
 * add guidsl.jar (FM-Test 03)
 * add org.sat4j.core.jar (FM-Test 03)
 * to Fujis's build-path
 * 
 * TODO: rewrite
 * This aspect extends the JastAddJ's type check:
 * (VarAccess.splTypeCheck())
 * - checks, if one feature tries to access a field of a second feature 
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * - when two or more features provide an implementation for a type and 
 *   all of them are optional, then it would be possible, that no implementation
 *   of the type is present. 
 * (MethodAccess.splTypeCheck())
 * - checks, if one feature tries to access a method of a second feature
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * - when two or more features provide an implementation for a type and 
 *   all of them are optional, then it would be possible, that no implementation
 *   of the type is present.
 * (TypeAccess.splTypeCheck())
 * - collect all type accesses and check, if all required types are present
 *   in at least one feature each
 *   - types, classes, interfaces, Generics, (try, catch, throw)
 *   - Cast, Constructor,
 *   - 4 types of inner classes (static, member, local, anonymous)
 */

import de.ovgu.featureide.fm.core.FeatureModel;
import de.ovgu.featureide.fm.core.Feature;
import de.ovgu.featureide.fm.core.FeatureDependencies;
import de.ovgu.featureide.fm.core.io.guidsl.GuidslReader;
import de.ovgu.featureide.fm.core.io.UnsupportedModelException;

import org.sat4j.specs.TimeoutException;

import fuji.TypeErrorInfo;

aspect ExtendedTypeCheck {

	/* the feature model */
	protected static FeatureModel ASTNode.featureModel;

	public FeatureModel ASTNode.getFeatureModel() {
		return featureModel;
	}

	public void ASTNode.setFeatureModel(FeatureModel model) {	
		featureModel = model;
	}

	/* collect all TypeAccesses in Map 
	 * format: 
	 * map: fromFeatureID, map: sourceHostType, map: targetHostType, TypeErrorInfo
	 * (decls, that implement this type and source file name
	 * and line number of type accesses of this type) */
	protected static HashMap<Integer, HashMap<TypeDecl, HashMap<TypeDecl, TypeErrorInfo>>> ASTNode.typeAccesses =
	new HashMap<Integer, HashMap<TypeDecl, HashMap<TypeDecl, TypeErrorInfo>>>();

	/* for type accesses */
	protected ArrayList Program.errors = new ArrayList();

	/* for type accesses */
	protected ArrayList Program.warnings = new ArrayList();

	/* report a type error */
	/* correct line number and file name */
	public void ASTNode.typeError(String accessSourceInfo, String msg) {
		ASTNode node = this;
		while(node != null && !(node instanceof Program))
			node = node.getParent();
		Program pr = (Program)node;
		pr.errors.add(new Problem(accessSourceInfo, msg, 
				Problem.Severity.ERROR, Problem.Kind.SEMANTIC));
	}

	/* line numbers included in fileName */
	public Problem.Problem(String fileName, String message, Severity severity, Kind kind) {
		this(fileName, message);
		this.kind = kind;
		this.severity = severity;
	}

	/* (fromFeature ALWAYS toFeature) due to feature model */
	protected boolean ASTNode.always(FeatureDependencies dep, 
			Feature fromFeature, 
			Feature toFeature) {		  	  
		return dep.always(fromFeature).contains(toFeature);
	}

	/* (fromFeature NEVER toFeature) due to feature model */
	protected boolean ASTNode.never(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.never(fromFeature).contains(toFeature);
	}

	/* (fromFeature MAYBE toFeature) due to feature model */
	protected boolean ASTNode.maybe(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.maybe(fromFeature).contains(toFeature);
	}

	/* collect Type Errors */
	public void ASTNode.collectSplTypeErrors() {
		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/*
		 * TODO: werden hierdurch ALLE benoetigten Features in der richtigen
		 * REIHENFOLGE eingelesen?
		 */
		listFeatures.addAll(featureModel.getConcreteFeatures());
		/* for all fromFeatureIDs */
		for (int i : typeAccesses.keySet()) {
			Feature fromFeature = featureModel.getFeature(listFeatures.get(i)
					.getName());
			/* sourceHostType */
			if (!(typeAccesses.get(i).isEmpty())) {
				HashMap<TypeDecl, HashMap<TypeDecl, TypeErrorInfo>> typesAndInfo = typeAccesses
						.get(i);
				if (!(typesAndInfo.keySet().isEmpty())) {
					for (TypeDecl sourceHostType : typesAndInfo.keySet()) {
						HashMap<TypeDecl, TypeErrorInfo> innerTypeAndInfo = typesAndInfo
								.get(sourceHostType);
						/* list needed types ... */
						if (!(innerTypeAndInfo.keySet().isEmpty())) {
							for (TypeDecl targetHostType : innerTypeAndInfo.keySet()) {
								/* decls, that implement this type */
								SimpleSet decls = innerTypeAndInfo.get(targetHostType)
										.getDecls();
								HashMap<ASTNode, TypeDecl> declsAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
								for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
									HashSet<TypeDecl> targetHostTypes = new HashSet<TypeDecl>();
									targetHostTypes.add(targetHostType);
								   declsAndTargetHostTypes.put((ASTNode) iter.next(), targetHostType);
								}
								addSplErrors(i, declsAndTargetHostTypes, "auf den Typ", true, sourceHostType,
										false);
							}
						}
					}
				}
			}
		}
	}

	/* copied from ErrorCheck.jrag and modified: added "spl" or "Spl" 
	 * in front of method names or in method names
	 * added: FeatureModel in ASTNode
	 * TODO: get sure, that the featureModel is properly initiated.
	 */

	/* */
	public void ASTNode.collectSplErrors() {
		splTypeCheck();
		for(int i = 0; i < getNumChild(); i++) {
			getChild(i).collectSplErrors();
		}
	}

	public void Program.splErrorCheck(FeatureModel model, Collection collection) {
		setFeatureModel(model);
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
			}
		}
		collectSplTypeErrors();
		collection.addAll(errors);
	}

	public void Program.splErrorCheck(FeatureModel model, Collection collection, Collection warn) {	
		setFeatureModel(model);
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
				warn.addAll(cu.warnings);
			}
		}
		collectSplTypeErrors();
		collection.addAll(errors);
		warn.addAll(warnings);
	}

	public void CompilationUnit.splErrorCheck(FeatureModel model, Collection collection) {
		setFeatureModel(model);
		collectSplErrors();
		collection.addAll(errors);
	}

	public void CompilationUnit.splErrorCheck(FeatureModel model, Collection err, Collection warn) {		
		setFeatureModel(model);
		collectSplErrors();
		err.addAll(errors);
		warn.addAll(warnings);
	}

	public boolean Program.splErrorCheck(FeatureModel model) {		
		Collection collection = new LinkedList();
		splErrorCheck(model, collection);
		if(collection.isEmpty()) {
			return false;
		}
		System.out.println("SPL Errors:");
		for(Iterator iter = collection.iterator(); iter.hasNext(); ) {
			String s = (String)iter.next();
			System.out.println(s);
		}
		return true;
	}

	/* /copy_&_modify */

	public void ASTNode.addSplErrors(int fromFeatureID,
			HashMap<ASTNode, TypeDecl> declsAndTargetHostTypes,
			String targetStructure, boolean isTypeAccess, TypeDecl sourceHostType,
			boolean secondRoundDone) {
		FeatureModel model = getFeatureModel();
		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/*
		 * TODO: werden hierdurch ALLE benoetigten Features in der richtigen
		 * REIHENFOLGE eingelesen?
		 */
		listFeatures.addAll(model.getConcreteFeatures());
		HashSet<TypeDecl> targetHostTypes = new HashSet<TypeDecl>();
		for (Iterator iter = declsAndTargetHostTypes.keySet().iterator(); iter
				.hasNext();) {
			TypeDecl targetHostType = declsAndTargetHostTypes.get((ASTNode) iter
					.next());
			targetHostTypes.add(targetHostType);
		}
		if (declsAndTargetHostTypes.keySet().size() == 1) {
			ASTNode decl = declsAndTargetHostTypes.keySet().iterator().next();
			String declString = decl.toString();
			int toFeatureID = decl.featureID();
			TypeDecl targetHostType = (TypeDecl) declsAndTargetHostTypes.get(decl)
					.iterator().next();
			String declFirstLine;
			if (isTypeAccess) {
				// <package name (default:"(default package)")>.<type name>
				declFirstLine = (targetHostType.packageName() != "" ? targetHostType
						.packageName() : "(default package)") + "." + targetHostType.name();
			} else {

				declFirstLine = (declString.indexOf("\n") == -1 ? declString
						: declString.substring(0, declString.indexOf("\n")) + " ... }");
			}
			/* beide Features vorhanden? */
			if ((fromFeatureID != -1) && (toFeatureID != -1)) {
				/* Wird auf ein anderes Feature zugegriffen? */
				if (fromFeatureID != toFeatureID) {
					/*
					 * Auf Reihenfolge Features aus dem FM zu Feature(-ID)s aus dem AST
					 * achten!
					 */
					Feature fromFeature = model.getFeature(listFeatures
							.get(fromFeatureID).getName());
					Feature toFeature = model.getFeature(listFeatures.get(toFeatureID)
							.getName());
					/* Ermittle Abhaengigkeiten aus dem FM */
					FeatureDependencies dep = new FeatureDependencies(model);
					/*
					 * kummulative Ausgabe der Quelldateinamen und Zeilennummern fuer
					 * einen Typzugriff aus einem Feature
					 */
					StringBuilder sbtei = new StringBuilder();
					if (isTypeAccess) {
						TypeErrorInfo tei = typeAccesses.get(fromFeatureID)
								.get(sourceHostType).get(targetHostType);
						for (String s : tei.getAccessSourceInfo()) {
							sbtei.append(s);
							sbtei.append("\n");
						}
						sbtei.setLength(sbtei.length() - 1);
					}
					/*
					 * fromFeature und toFeature koennen nicht beide gleichzeitig in einer
					 * validen Auswahl vorkommen (never-Beziehung) -> Fehler
					 */
					if (never(dep, fromFeature, toFeature)) {
						StringBuilder sb = new StringBuilder();
						sb.append("never-Beziehung:");
						sb.append("\nFeature ");
						sb.append(fromFeature.getName());
						sb.append(" greift ");
						sb.append(targetStructure);
						sb.append("\n  ");
						sb.append(declFirstLine);
						sb.append("\ndes Features ");
						sb.append(toFeature.getName());
						sb.append(" zu.\nDie Features ");
						sb.append(fromFeature.getName());
						sb.append(" und ");
						sb.append(toFeature.getName());
						sb.append(" koennen aber ");
						sb.append("nicht beide gleichzeitig in einer validen ");
						sb.append("Auswahl vorkommen.\n");
						if (isTypeAccess) {
							typeError(sbtei.toString(), sb.toString());
						} else {
							error(sb.toString());
						}
					}
					/*
					 * toFeature kann, muss aber nicht in einer validen Auswahl vorkommen
					 * (maybe-Beziehung) -> moegliche Fehlerquelle
					 */
					if (maybe(dep, fromFeature, toFeature)) {
						StringBuilder sb = new StringBuilder();
						sb.append("maybe-Beziehung:");
						sb.append("\nFeature ");
						sb.append(fromFeature.getName());
						sb.append(" greift ");
						sb.append(targetStructure);
						sb.append("\n  ");
						sb.append(declFirstLine);
						sb.append("\ndes Features ");
						sb.append(toFeature.getName());
						sb.append(" zu.\n");
						sb.append("Das Ziel-Feature ");
						sb.append(toFeature.getName());
						sb.append(" ist aber nicht in jeder ");
						sb.append("moeglichen validen Auswahl vorhanden.\n");
						if (isTypeAccess) {
							typeError(sbtei.toString(), sb.toString());
						} else {
							error(sb.toString());
						}
					}
				}
			}
		} else if (declsAndTargetHostTypes.keySet().size() > 1) {
			HashSet<Integer> toFeatureIDs = new HashSet<Integer>();
			HashMap<Integer, String> mapDecls = new HashMap<Integer, String>();
			for (Iterator iter = declsAndTargetHostTypes.keySet().iterator(); iter
					.hasNext();) {
				ASTNode var = (ASTNode) iter.next();
				toFeatureIDs.add(var.featureID());
				TypeDecl targetHostType = declsAndTargetHostTypes.get(var);
				String declFirstLine;
				if (isTypeAccess) {
					// <package name (default: "(default package)")>.<type name>
					declFirstLine = (targetHostType.packageName() != "" ? targetHostType
							.packageName() : "(default package)")
							+ "."
							+ targetHostType.name();
				} else {
					String declString = var.toString();
					declFirstLine = (declString.indexOf("\n") == -1 ? declString
							: declString.substring(0, declString.indexOf("\n")) + " ... }");
				}
				mapDecls.put(var.featureID(), declFirstLine);
			}
			Feature fromFeature = model.getFeature(listFeatures.get(fromFeatureID)
					.getName());
			/* Liste einer Menge von Zielfeatures */
			ArrayList<Set<Feature>> toFeaturesList = new ArrayList<Set<Feature>>();
			for (int toFeatureID : toFeatureIDs) {
				Feature toFeature = model.getFeature(listFeatures.get(toFeatureID)
						.getName());
				HashSet<Feature> toFeatureSet = new HashSet<Feature>();
				toFeatureSet.add(toFeature);
				toFeaturesList.add(toFeatureSet);
			}
			/*
			 * for TypeAccess: list all source files and line numbers, where a
			 * TypeAccess to a specific type takes place
			 */
			StringBuilder sbtei = new StringBuilder();
			if (isTypeAccess) {
				TypeErrorInfo tei = typeAccesses.get(fromFeatureID).get(sourceHostType)
						.get(targetHostTypes.iterator().next());
				for (String s : tei.getAccessSourceInfo()) {
					sbtei.append(s);
					sbtei.append("\n");
				}
				sbtei.setLength(sbtei.length() - 1);
			}
			HashSet<Feature> accessingFeature = new HashSet<Feature>();
			accessingFeature.add(fromFeature);
			try {
				/* alle Features optional, aufrufendes Feature ist gesetzt */
				if (model.mayBeMissing(accessingFeature, toFeaturesList)) {
					StringBuilder sb = new StringBuilder();
					sb.append(toFeatureIDs.size());
					sb.append(" optionale Ziele ");
					sb.append("(es kann eine valide Auswahl geben, "
							+ "in der alle diese Ziele nicht vorhanden sind):\n");
					sb.append("Feature ");
					sb.append(fromFeature.getName());
					sb.append(" zielt ");
					sb.append(targetStructure);
					sb.append(" folgender Features:\n");
					for (int toFeatureID : toFeatureIDs) {
						sb.append(model.getFeature(listFeatures.get(toFeatureID).getName())
								.getName());
						sb.append(":\t");
						String decl = mapDecls.get(toFeatureID);
						sb.append(decl);
						sb.append("\n");
					}
					if (isTypeAccess) {
						typeError(sbtei.toString(), sb.toString());
					} else {
						error(sb.toString());
					}
				}
			} catch (TimeoutException e) {
				e.printStackTrace();
			}
		}
		if (!(secondRoundDone)) {
			/* second Round */

			/*
			 * bekannt: - eindeutiges Ziel (d.h. eine toFeatureID), d.h. nur eine
			 * Implementierung des Typs, im dem sich das Ziel befindet - Quell- und
			 * Ziel-Feature sind beide vorhanden - Quell- und Ziel-Feature sind
			 * unterschiedlich
			 */

			/*
			 * in jeweiliger Liste (extends, implements, throws) herausfinden, in
			 * welchem Feature Information fehlt (unter der Bedingung, dass in den
			 * anderen Features keine widerspruechliche Information vorhanden ist)
			 * maybe- oder never-Beziehung dieser Features zu/m informations-
			 * tragenden Feature(s) herausfinden -> Fehlermeldung, wenn die
			 * Information nicht in allen validen Produkten vorhanden sein kann (wenn
			 * nicht mindestens ein informationstragendes Feature in always-Beziehung
			 * zu mindestens einem Feature ohne diese Information steht) - extends
			 * (fuer Klassen und Interfaces) - implements (nur fuer Klassen) qualified
			 * name, gleichbenannte Klassen in verschiedenen Verzeichnissen? ermittle
			 * die Liste der Features, die an dieser Klasse beteiligt sind:
			 * (alternativ: mittels SPLStructure getRoleGroups)
			 */

			/*
			 * ansonsten: teste, ob extends-, implements- oder throws- Information
			 * nicht in dieser Klasse des Quellfeatures, dafuer aber nur in dieser
			 * Klasse eines Zielfeatures steht, das mit dieser Klasse des
			 * Quellfeatures in maybe-, never-, bzw. bei mehreren Ziele in
			 * mayBeMissing-Beziehung steht
			 */

			/*
			 * Zugriff kommt aus einer Klasse: pruefe auf extends und implements
			 */
			if (sourceHostType instanceof ClassDecl) {
				ClassDecl sc = (ClassDecl) sourceHostType;
				/*
				 * ermittle, welche Features alle zu dieser Klasse beigetragen haben
				 */
				HashSet<Integer> allFeatures = new HashSet<Integer>();
				for (BodyDecl bd : sc.getBodyDecls()) {
					allFeatures.add(bd.featureID());
				}
				for (TypeDecl targetHostType : targetHostTypes) {
					/* Zugriff geht auf ein Element in einer Klasse */
					if (targetHostType instanceof ClassDecl) {
						/* extends-Info */
						/*
						 * ermittle alle Features, in denen extends-Information mit diesem
						 * targetHostType vorhanden ist
						 */
						HashSet<Access> accesses = new HashSet<Access>();
						if (!(sc.getPreservedSuperClassAccess().isEmpty())) {
							for (Access ac : sc.getPreservedSuperClassAccess()) {
								/* wenn das der gesuchte Typ ist */
								if (ac.type().equals(targetHostType)) {
									/*
									 * speichere featureID des Features, das diese
									 * extends-Information enthaelt
									 */
									accesses.add(ac);
								}
							}
						}
						if (sc.hasSuperClassAccess()) {
							/* wenn das der gesuchte Typ ist */
							if (sc.getSuperClassAccess().type().equals(targetHostType)) {
								accesses.add(sc.getSuperClassAccess());
							}
						}
						/*
						 * wenn ueberhaupt extends-Info mit diesem targetType vorhanden war:
						 */
						if (!(accesses.isEmpty())) {
							/*
							 * fehlt in fromFeature die extends-Information mit diesem
							 * targetType?
							 */
							HashSet<Integer> featuresWithExtendInfo = new HashSet<Integer>();
							for (Access ac : accesses) {
								featuresWithExtendInfo.add(ac.featureID());
							}
							if (!(featuresWithExtendInfo.contains(fromFeatureID))) {
								/* TODO: Ausgabe bei mehreren Zielen ueberpruefen */
								/*
								 * Fehler tritt nur auf bei unterschiedlichen packages und
								 * protected-Modifier
								 */
								/*
								 * bei mehreren decls: wenn ueberhaupt nur eines protected ist,
								 * dann bereits Fehler (?)
								 */
								if (!(sourceHostType.packageName().equals(targetHostType
										.packageName()))) {
									boolean isProtected = false;
									for (ASTNode decl : declsAndTargetHostTypes.keySet()) {
										if (decl instanceof FieldDeclaration) {
											isProtected |= ((FieldDeclaration) decl).getModifiers()
													.isProtected();
										} else if (decl instanceof MethodDecl) {
											isProtected |= ((MethodDecl) decl).getModifiers()
													.isProtected();
										} else {
											isProtected |= targetHostType.getModifiers()
													.isProtected();
										}
									}
									if (isProtected) {
										/* TODO: Ausgabe bei mehreren Zielen ueberpruefen */
										HashMap<ASTNode, TypeDecl> accessesAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
										for (Access ac : accesses) {
											accessesAndTargetHostTypes.put(ac, ac.hostType());
										}
										addSplErrors(fromFeatureID, accessesAndTargetHostTypes,
												"mittels nicht immer vorhandener extends-Information "
														+ targetStructure + " im Typ "
														+ targetHostType.name().toString(), false,
												sourceHostType, true);
									}
								}
							}
						}
					}
					/* Zugriff geht auf ein Element aus einem Interface */
					if (targetHostType instanceof InterfaceDecl) {
						/* implements-Info */
						/*
						 * ermittle alle Features, in denen die implements-Info mit diesem
						 * targetHostType vorhanden ist
						 */
						HashMap<ASTNode, TypeDecl> accessesAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
						if (sc.getNumImplements() != 0) {
							for (Access ac : sc.getImplementsList()) {
								if (ac.type().equals(targetHostType)) {
									accessesAndTargetHostTypes.put(ac, ac.hostType());
								}
							}
						}
						/* wenn ueberhaupt Features diesen targetHostType implementieren */
						if (!(accessesAndTargetHostTypes.keySet().isEmpty())) {
							/* fehlt im fromFeature diese implements-Information? */
							HashSet<Integer> featuresWithImplementInfo = new HashSet<Integer>();
							for (ASTNode ac : accessesAndTargetHostTypes.keySet()) {
								featuresWithImplementInfo.add(ac.featureID());
							}
							if (!(featuresWithImplementInfo.contains(fromFeatureID))) {
								addSplErrors(fromFeatureID, accessesAndTargetHostTypes,
										"mittels nicht immer vorhandener implements-Information "
												+ targetStructure + " im Typ "
												+ targetHostType.name().toString(), false,
										sourceHostType, true);
							}
						}
					}
				}
			}
			/* Zugriff kommt aus einem Interface: pruefe auf extends */
			if (sourceHostType instanceof InterfaceDecl) {
				for (TypeDecl targetHostType : targetHostTypes) {
					if (targetHostType instanceof InterfaceDecl) {
						InterfaceDecl si = (InterfaceDecl) sourceHostType;
						/*
						 * ermittle, welche Features alle zu diesem Interface beigetragen
						 * haben
						 */
						HashSet<Integer> allFeatures = new HashSet<Integer>();
						for (BodyDecl bd : si.getBodyDecls()) {
							allFeatures.add(bd.featureID());
						}

						/* extends-Info */
						/*
						 * ermittle alle Features, in denen extends-Information mit diesem
						 * targetHostType vorhanden ist
						 */
						HashMap<ASTNode, TypeDecl> accessesAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
						if (si.getNumSuperInterfaceId() != 0) {
							for (Access ac : si.getSuperInterfaceIdList()) {
								/* wenn das der gesuchte Typ ist */
								if (ac.type().equals(targetHostType)) {
									/*
									 * speichere featureID des Features, das diese
									 * extends-Information enthaelt
									 */
									accessesAndTargetHostTypes.put(ac, ac.hostType());
								}
							}
						}
						/*
						 * wenn ueberhaupt extends-Info mit diesem targetType vorhanden war:
						 */
						if (!(accessesAndTargetHostTypes.keySet().isEmpty())) {
							/*
							 * fehlt in fromFeature die extends-Information mit diesem
							 * targetType?
							 */
							HashSet<Integer> featuresWithExtendInfo = new HashSet<Integer>();
							for (ASTNode ac : accessesAndTargetHostTypes.keySet()) {
								featuresWithExtendInfo.add(ac.featureID());
							}
							if (!(featuresWithExtendInfo.contains(fromFeatureID))) {
								addSplErrors(fromFeatureID, accessesAndTargetHostTypes,
										"mittels nicht immer vorhandener extends-Information "
												+ targetStructure + " im Typ "
												+ targetHostType.name().toString(), false,
										sourceHostType, true);
							}
						}
					}
				}
			}
		}
	}

	public void ASTNode.splTypeCheck() { }

	public void VarAccess.splTypeCheck() {
		/* Ist der Variablenzugriff ein Feldzugriff? */
		if (isFieldAccess()) {
			HashMap<ASTNode, TypeDecl> declsAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
			for (Iterator iter = decls().iterator(); iter.hasNext();) {
				BodyDecl decl = (BodyDecl) iter.next();
				declsAndTargetHostTypes.put(decl, decl.hostType());
			}
			addSplErrors(featureID(), declsAndTargetHostTypes, "auf das Feld", false,
					hostType(), false);
		}
	}

	public void MethodAccess.splTypeCheck() {
		HashMap<ASTNode, TypeDecl> declsAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
		/*
		 * original-Check: Teste, ob eine Methode "original" heiszt, dann sollte in
		 * diesem Typ (in diesem oder einem anderem Feature) eine Methode mit
		 * gleicher Signatur wie die Aufrufumgebung existieren
		 */
		/*
		 * Methodenaufruf original gefunden, in einem anderen Feature muss im
		 * gleichen Typ eine Methode mit gleicher Signatur wir die Methode des
		 * Aufrufkontexts enthalten sein und das Feature laut Feature-Modell
		 * verfuegbar sein
		 */
		if (name().equals("original")) {
			/* in welcher Methode ist dieser original-Aufruf enthalten? */
			String context = ((MethodDecl) enclosingBodyDecl()).signature();
			/*
			 * ermittle im Typ alle Methoden mit gleicher Signatur, die aus einem
			 * anderen Feature stammen
			 */
			for (BodyDecl bd : hostType().getBodyDecls()) {
				if (bd instanceof MethodDecl) {
					MethodDecl md = (MethodDecl) bd;
					if (md.signature().equals(context) && (md.featureID() != featureID())) {
						declsAndTargetHostTypes.put(md, md.hostType());
					}
				}
			}
			StringBuffer s = new StringBuffer();
			s.append("mittels des original-Aufrufs\n  ");
			s.append(name());
			s.append("(");
			for (int i = 0; i < getNumArg(); i++) {
				if (i != 0) {
					s.append(", ");
				}
				s.append(getArg(i).type().typeName());
			}
			s.append(")");
			s.append(" in der Methode " + context + " des Typs " + methodHost());
			s.append(" auf die Methode");
			addSplErrors(featureID(), declsAndTargetHostTypes, s.toString(), false,
					hostType(), false);
		} else {
			/* ermittle im Typ alle Methoden mit gleicher Signatur */
			for (BodyDecl bd : decl().hostType().getBodyDecls()) {
				if (bd instanceof MethodDecl) {
					if (((MethodDecl) bd).signature().equals(decl().signature())) {
						declsAndTargetHostTypes.put(bd, bd.hostType());
					}
				}
			}
			addSplErrors(featureID(), declsAndTargetHostTypes, "auf die Methode",
					false, hostType(), false);
		}
	}

	public void TypeAccess.splTypeCheck() {
		/* given for this TypeAccess: fromFeatureID, sourceHostType, targetHostType */
		/*
		 * collect all TypeAccesses: source feature, type, decl(s), source file(s),
		 * line number(s)
		 */
		int fromFeatureID = featureID();
		/* ignore importDecl */
		if (isRaw()) {
			/* default-Typen nicht sammeln */
			if (!(fromFeatureID == -1) && !(decl().featureID() == -1) && !(hostType().featureID() == -1) && !(decl().hostType().featureID() == -1)) {
				HashMap<TypeDecl, HashMap<TypeDecl, TypeErrorInfo>> typesAndInfo = typeAccesses
						.get(fromFeatureID);
				if (typesAndInfo == null) {
					typesAndInfo = new HashMap<TypeDecl, HashMap<TypeDecl, TypeErrorInfo>>();
				}
				HashMap<TypeDecl, TypeErrorInfo> innerTypeAndInfo = typesAndInfo
						.get(hostType());
				if (innerTypeAndInfo == null) {
					innerTypeAndInfo = new HashMap<TypeDecl, TypeErrorInfo>();
				}
				/*
				 * find all constructors of this type to get sure that the type is
				 * reachable, but this is not enough: also get sure that the right
				 * constructor is reachable --> ClassInstanceExpr.splTypeCheck()
				 */
				HashSet<ConstructorDecl> listDecls = new HashSet<ConstructorDecl>();
				for (BodyDecl bd : decl().hostType().getBodyDecls()) {
					if (bd instanceof ConstructorDecl) {
						listDecls.add((ConstructorDecl) bd);
					}
				}
				TypeErrorInfo tei = innerTypeAndInfo.get(decl().hostType());
				if (tei == null) {
					tei = new TypeErrorInfo(new SimpleSet.SimpleSetImpl(listDecls), new HashSet<String>());
				} else {
					for (Iterator iter = tei.getDecls().iterator(); iter.hasNext(); ) {
						listDecls.add((ConstructorDecl) iter.next());
					}
					tei.setDecls(new SimpleSet.SimpleSetImpl(listDecls));
				}
				/* remember source file and line number of type access */
				tei.getAccessSourceInfo().add(sourceFile() + ":" + lineNumber());
				innerTypeAndInfo.put(decl().hostType(), tei);
				typesAndInfo.put(hostType(), innerTypeAndInfo);
				typeAccesses.put(fromFeatureID, typesAndInfo);
			}
		}
	}

	public void ClassInstanceExpr.splTypeCheck() {
		HashMap<ASTNode, TypeDecl> declsAndTargetHostTypes = new HashMap<ASTNode, TypeDecl>();
		/* ermittle im Typ alle Konstruktoren mit gleicher Signatur */
		for (BodyDecl bd : decl().hostType().getBodyDecls()) {
			if (bd instanceof ConstructorDecl) {
				if (((ConstructorDecl) bd).signature().equals(decl().signature())) {
					declsAndTargetHostTypes.put((ConstructorDecl) bd, decl().hostType());
				}
			}
		}
		addSplErrors(featureID(), declsAndTargetHostTypes, "auf den Konstruktor",
				false, hostType(), false);
	}
}