/* Extended Type Check
 * 2012-04-14
 * 
 * IPORTANT: 
 * add jar de.ovgu.featureide.fm.core... (FM-Test 03)
 * to Fuji's build-path
 * 
 * This aspect extends the JastAddJ's type check:
 * (VarAccess.nameCheck())
 * - checks, if one feature tries to access a field of a second feature 
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * (MethodAccess.nameCheck())
 * - checks, if one feature tries to access a method of a second feature
 *   that is optional -> error, if not explicitly stated as a constraint
 *   in the feature model
 * - same for two mutual exclusive fields
 * 
 * further:
 * - types
 * - classes
 * - interfaces
 * (optional and mutual exclusion)  
 */

import de.ovgu.featureide.fm.core.FeatureModel;
import de.ovgu.featureide.fm.core.Feature;
import de.ovgu.featureide.fm.core.FeatureDependencies;
import de.ovgu.featureide.fm.core.io.guidsl.GuidslReader;
import de.ovgu.featureide.fm.core.io.UnsupportedModelException;

aspect ExtendedTypeCheck {

	/* copied from ErrorCheck.jrag and modified: added "spl" or "Spl" */

	public void ASTNode.collectSplErrors() {
		//		    nameCheck();
		//		    typeCheck();
		//		    accessControl();
		//		    exceptionHandling();
		//		    checkUnreachableStmt();
		//		    definiteAssignment();
		//		    checkModifiers();
		splTypeCheck();
		for(int i = 0; i < getNumChild(); i++) {
			getChild(i).collectSplErrors();
		}
	}

	public void Program.splErrorCheck(Collection collection) {
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
			}
		}
	}
	public void Program.splErrorCheck(Collection collection, Collection warn) {
		for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit)iter.next();
			if(cu.fromSource()) {
				cu.collectSplErrors();
				collection.addAll(cu.errors);
				warn.addAll(cu.warnings);
			}
		}
	}

	public void CompilationUnit.splErrorCheck(Collection collection) {
		collectSplErrors();
		collection.addAll(errors);
	}
	public void CompilationUnit.splErrorCheck(Collection err, Collection warn) {
		collectSplErrors();
		err.addAll(errors);
		warn.addAll(warnings);
	}

	public boolean Program.splErrorCheck() {
		Collection collection = new LinkedList();
		splErrorCheck(collection);
		if(collection.isEmpty())
			return false;
		System.out.println("SPL Errors:");
		for(Iterator iter = collection.iterator(); iter.hasNext(); ) {
			String s = (String)iter.next();
			System.out.println(s);
		}
		return true;
	}

	/* /copy_&_modify */

	public void ASTNode.optionalAndMutualExclusiveErrors(int fromFeatureID,
			int toFeatureID, String targetStructure, String decl) {

		/* TODO: file name from outside */
		FeatureModel model = getFeatureModel("model.m");

		/* get features */
		ArrayList<Feature> listFeatures = new ArrayList<Feature>();
		/* TODO: werden hierdurch ALLE benoetigten Features in der 
		 * richtigen REIHENFOLGE eingelesen? */
		listFeatures.addAll(model.getConcreteFeatures());

		/* beide Features vorhanden? */
		if(fromFeatureID != -1 && toFeatureID != -1) {

			/* Wird auf ein anderes Feature zugegriffen? */
			if (!(fromFeatureID == toFeatureID)) {
				/*
				 * Auf Reihenfolge Features aus dem FM zu
				 * Feature(-ID)s aus dem AST achten!
				 */				
				Feature fromFeature = model.getFeature(listFeatures
						.get(fromFeatureID).getName());

				Feature toFeature = model.getFeature(listFeatures
						.get(toFeatureID).getName());					 

				/* mit SAT-Solver testen, ob dieser Umstand 
				 * (Zugriff auf Feld in optionalem Feature)
				 * als zusŠtzliches Constraint im FM berŸcksichtigt 
				 * wurde: fromFeature implies toFeature 
				 * falls ja: okay
				 * falls nein: Fehlermeldung
				 *  (oder HinzufŸgen des Constraints zum FM)
				 */

				FeatureDependencies dep = new FeatureDependencies(model);	 

				String declFirstLine = 
						( decl.indexOf("\n") == -1 ? 
								decl : decl.substring(0, decl.indexOf("\n")) + " ...");

				if(never(dep, fromFeature, toFeature)) {
					/*
					 * Zugriff auf ein Feld/eine Methode in einem Feature
					 * gefunden, das in gegenseitigem Ausschluss steht
					 * -> Fehlermeldung
					 */					
					error("gegenseitiger Ausschluss:" 
							+ "\n    Feature " + fromFeature.getName()
							+ " greift auf " + targetStructure 
							+ "\n" + declFirstLine
							+ "\n    des Features "
							+ toFeature.getName() + " zu.\n    "
							+ fromFeature.getName() + " und "
							+ toFeature.getName()
							+ " schlie§en sich aber "
							+ "gegenseitig aus.\n");
				}

				if(maybe(dep, fromFeature, toFeature)) {
					/*
					 * Zugriff auf ein Feld/eine Methode/einen Typen 
					 * in einem optionalen Feature
					 * gefunden -> Fehlermeldung
					 */					
					error("Zugriff auf optionales Feature:"
							+ "\n    Feature " + fromFeature.getName()
							+ " greift auf " + targetStructure
							+ "\n" + declFirstLine
							+ "\n    des optionalen Features "
							+ toFeature.getName() + " zu.\n");
				}
			}
		}		
	}

	public void ASTNode.splTypeCheck() {

	}

	public void VarAccess.splTypeCheck() {
		/* Ist der Variablenzugriff ein Feldzugriff? */
		if (isFieldAccess()) {			
			int fromFeatureID = featureID();
			int toFeatureID = decl().hostType().featureID();
			optionalAndMutualExclusiveErrors(fromFeatureID, toFeatureID, 
					"das Feld", decl().toString());
		}	  
	}

	public void MethodAccess.splTypeCheck() {
		int fromFeatureID = featureID();
		int toFeatureID = decl().hostType().featureID();
		optionalAndMutualExclusiveErrors(fromFeatureID, toFeatureID,
				"die Methode", decl().toString());	
	}

	public void TypeAccess.splTypeCheck() {
		int fromFeatureID = featureID();
		int toFeatureID = decl().hostType().featureID();
		optionalAndMutualExclusiveErrors(fromFeatureID, toFeatureID,
				"den Typ", decl().toString());	
	}

	public FeatureModel ASTNode.getFeatureModel(String fmFileName) {
		/* read in Feature-Model */
		FeatureModel model = new FeatureModel();
		File guidsl_file = new File(fmFileName);

		GuidslReader reader = new GuidslReader(model);
		try {
			reader.readFromFile(guidsl_file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedModelException e) {
			e.printStackTrace();
		}
		return model;
	}

	protected boolean ASTNode.always(FeatureDependencies dep, 
			Feature fromFeature, 
			Feature toFeature) {		  	  
		return dep.always(fromFeature).contains(toFeature);
	}

	protected boolean ASTNode.never(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.never(fromFeature).contains(toFeature);
	}

	protected boolean ASTNode.maybe(FeatureDependencies dep,
			Feature fromFeature,
			Feature toFeature) {
		return dep.maybe(fromFeature).contains(toFeature);
	}
}