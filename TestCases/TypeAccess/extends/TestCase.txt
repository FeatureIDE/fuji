TypeAccess: extends
------------------------

Erklaerung:
-----------

FeatureA erweitert (extends) FeatureB.


SubCases:
---------

01: FeatureB ist optional.
model:    Base : FeatureA [FeatureB] :: _Base ;
model-ok: Base : FeatureA [FeatureB] :: _Base ;
          %%
          FeatureA implies FeatureB ;

02: FeatureA und FeatureB schlieszen sich gegenseitig aus.
(durch zusaetzliches Constraint wird FeatureA getoetet.)
model:    Base : FeatureA | FeatureB :: _Base ;
model-ok: Base : FeatureA | FeatureB :: _Base ;
          %%
          FeatureA implies FeatureB ;

03: FeatureB2 implementiert die gleichen Typen wie FeatureB.
(2 (oder mehr) optionale Ziele fuer Typzugriff)
model:    Base : FeatureA [FeatureB] [FeatureB2] :: _Base ;
model-ok: Base : FeatureA [FeatureB] [FeatureB2] :: _Base ;
          %%
          not FeatureB iff FeatureB2 ;

04: komplexes Beispiel:
(FeatureA2 implementiert die gleichen Typen wie FeatureA.)

        I;interface;foo()
          ^         ^
          |         |
     implements implements
          |         |
          A         D
          ^
          |
      ----^----
      |       |
   extends extends
      |       |
      B       C
      
model:    Base : FeatureI [FeatureA] [FeatureA2] FeatureB FeatureC FeatureD :: _Base ;
model-ok: Base : FeatureI [FeatureA] [FeatureA2] FeatureB FeatureC FeatureD :: _Base ;
          %%
          not FeatureA iff FeatureA2 ;