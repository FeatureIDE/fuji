\subsection{OptInfoParameterCast}
%%
In der Klasse \code{X} des Features \feature{FeatureX}, die die Klasse \code{Y} des Features \feature{FeatureY} erweitert, wird deren Konstruktor definiert, der eine Instanz der Klasse \code{B} des Features \feature{FeatureB} als Parameter erwartet und dann den Konstruktor der Oberklasse mit einer Instanz der Klasse \code{A} aufruft. Außerdem findet sich in dieser Klasse eine Methode \code{foo(B b)}, die eine Instanz der Klasse \code{B} als Parameter erwartet. Die Klasse \code{A} wird in den Features \feature{FeatureA} und \feature{FeatureA2} definiert. Nur im Feature \feature{FeatureA2} findet sich die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert.
In der Klasse \code{Y} des Features \feature{FeatureY} findet sich der Konstruktor, der eine Instanz der Klasse \code{B} als Parameter erwartet. Außerdem wird eine Instanz der Klasse \code{X} erzeugt, indem der Konstruktor der Klasse \code{X} mit einer Instanz der Klasse \code{A} aufgerufen wird. Auf dieser Instanz wird die Methode \code{foo(B b)} aufgerufen, die als Argument eine Instanz der Klasse \code{A} erhält.
An drei Stellen wird also dem Konstruktor einer Oberklasse, dem Konstruktor einer Klasse und einer Methode einer Klasse jeweils eine Instanz einer Klasse übergeben, die eine Unterklasse des erwarteten Typs des Parameters ist.
\subsubsection{Fall 01: Das Feature \feature{FeatureA} ist im Feature-Modell als optional gekennzeichnet.} Dadurch kann es passieren, dass in einer Variante die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, nicht zur Verfügung steht, wenn das Feature \feature{FeatureA} nicht ausgewählt wurde.
Dieser Fall löst vier Fehlermeldungen aus:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCast/01/FeatureA2/A.java:1:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses the super constructor
  public B()
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCast/01/FeatureX/X.java:3:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses 
(by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCast/01/FeatureY/Y.java:4:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses 
(by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCast/01/FeatureY/Y.java:5:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses 
(by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureY $\implies$ FeatureA} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureY} ausgewählt wurde, auch das Feature \feature{FeatureA} ausgewählt werden.
\subsubsection{Fall 02: Die Features \feature{FeatureA} und \feature{FeatureA2} schließen sich im Feature-Modell gegenseitig aus.} Dadurch kann die Klasse \code{A} des Features \feature{FeatureA} nicht ausgewählt werden, wenn das Feature \feature{FeatureA2} ausgewählt wird. Damit ist auch die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, nicht verfügbar und es werden die folgenden Fehlermeldungen ausgegeben:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCast/02/FeatureA2/A.java:1:
  Semantic Error: NEVER dependency:
Class A of feature FeatureA2 accesses the super constructor
  public B()
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Features FeatureA2 and FeatureA cannot both be present in a valid selection.

/OptInfoParameterCast/02/FeatureX/X.java:3:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses 
(by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCast/02/FeatureY/Y.java:4:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses
 (by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCast/02/FeatureY/Y.java:5:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses
 (by an implicit cast from argument type to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureY $\implies$ FeatureA} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureY} ausgewählt wurde, auch das Feature \feature{FeatureA} ausgewählt werden. Allerdings kann dadurch das Feature \feature{FeatureA2} in keiner Variante mehr ausgewählt werden.
\subsubsection{Fall 03: Die Klasse \code{A} (mit der Information, dass die Klasse \code{A} die Klasse \code{B} erweitert) wird identisch in den zwei optionalen Features \feature{FeatureA} und \feature{FeatureAA} definiert.} Für die Zugriffe aus der Klasse \code{X} des Features \feature{FeatureX} und der Klasse \code{Y} des Features \feature{FeatureY} heraus werden nun zwei Ziele angeboten, die aber beide nicht ausgewählt werden müssen. Dadurch kann es passieren, dass die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, gar nicht zur Verfügung steht, wenn beide Features nicht ausgewählt wurden:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCast/03/FeatureA2/A.java:1:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B the super constructor
     public B()
   of class B.
- in feature FeatureAA as subclass of class B the super constructor
     public B()
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.

/OptInfoParameterCast/03/FeatureX/X.java:3:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
- in feature FeatureAA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.

/OptInfoParameterCast/03/FeatureY/Y.java:4:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
- in feature FeatureAA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.

/OptInfoParameterCast/03/FeatureY/Y.java:5:
  Semantic Error: 2 optional targets
   (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
- in feature FeatureAA as subclass of class B 
(by an implicit cast from argument type to parameter type) the type
     public class B { ... }
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{$\lnot$ FeatureA $\iff$ FeatureAA} hinzuzufügen.
Dadurch muss immer genau ein Exemplar der Klasse \code{A} mit der Vererbungsinformation ausgewählt werden.