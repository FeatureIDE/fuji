\subsection{OptInfoParameterCastOriginal}
%%
In der Klasse \code{X} des Features \feature{FeatureX} wird eine Methode \code{foo(B b)} definiert, die eine Instanz der Klasse \code{B} erwartet. Diese Methode wird im Feature \feature{FeatureX2} verfeinert, indem in der Methode mittel \code{original()} der Code der zu verfeinernden Methode aufgerufen wird. Allerdings wird dabei eine Instanz der Klasse \code{A} übergeben. Die Klasse \code{A} wird in den Features \feature{FeatureA} und \feature{FeatureA2} definiert und die Klasse \code{B} wird im Feature \feature{FeatureB} definiert. Die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, findet sich nur im Feature \feature{FeatureA}.
\subsubsection{Fall 01: Das Feature \feature{FeatureA} ist im Feature-Modell als optional gekennzeichnet.} Dadurch kann es passieren, dass in einer Variante die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, nicht zur Verfügung steht, wenn das Feature \feature{FeatureA} nicht ausgewählt wurde, das als einziges Feature diese Information enthält.
Dieser Fall löst zwei Fehlermeldungen aus:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCastOriginal/01/FeatureA2/A.java:1:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses the super constructor
  public B()
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.

/OptInfoParameterCastOriginal/01/FeatureX2/X.java:3:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses
 (by an implicit cast from argument to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureX2 $\implies$ FeatureA} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureX2} ausgewählt wurde, auch das Feature \feature{FeatureA} ausgewählt werden.
\subsubsection{Fall 02: Die Features \feature{FeatureA} und \feature{FeatureA2} schließen sich im Feature-Modell gegenseitig aus.} Dadurch kann die Klasse \code{A} des Features \feature{FeatureA} nicht ausgewählt werden, wenn das Feature \feature{FeatureA2} ausgewählt wird. Damit ist auch die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, nicht verfügbar und es werden folgende Fehlermeldungen ausgegeben:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCastOriginal/02/FeatureA2/A.java:1:
  Semantic Error: NEVER dependency:
Class A of feature FeatureA2 accesses the super constructor
  public B()
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Features FeatureA2 and FeatureA cannot both be present in a valid selection.

/OptInfoParameterCastOriginal/02/FeatureX2/X.java:3:
  Semantic Error: MAYBE dependency:
Class A of feature FeatureA2 accesses 
(by an implicit cast from argument to parameter type) the type
  public class B { ... }
which is accessible via class B.
Class A of feature FeatureA extends class B.
The information that class A extends class B is only present in feature FeatureA.
Feature FeatureA may not be present in every valid selection.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureX2 $\implies$ FeatureA} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureX2} ausgewählt wurde, auch das Feature \feature{FeatureA} ausgewählt werden. Allerdings kann dadurch das Feature \feature{FeatureA2} in keiner Variante mehr ausgewählt werden.
\subsubsection{Fall 03: Die Klasse \code{A} (mit der Information, dass die Klasse \code{A} die Klasse \code{B} erweitert) wird identisch in den zwei optionalen Features \feature{FeatureA} und \feature{FeatureAA} definiert.} Für die Zugriffe aus der Klasse \code{X} des Features \feature{FeatureX2} heraus werden nun zwei Ziele angeboten, die aber beide nicht ausgewählt werden müssen. Dadurch kann es passieren, dass die Information, dass die Klasse \code{A} die Klasse \code{B} erweitert, gar nicht zur Verfügung steht, wenn beide Features nicht ausgewählt wurden:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/OptInfoParameterCastOriginal/03/FeatureA2/A.java:1:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B the super constructor
     public B()
   of class B.
- in feature FeatureAA as subclass of class B the super constructor
     public B()
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.

/OptInfoParameterCastOriginal/03/FeatureX2/X.java:3:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Class A of feature FeatureA2 accesses:
- in feature FeatureA as subclass of class B 
(by an implicit cast from argument to parameter type) the type
     public class B { ... }
   of class B.
- in feature FeatureAA as subclass of class B 
(by an implicit cast from argument to parameter type) the type
     public class B { ... }
   of class B.
There may be a valid selection where none of the features FeatureA and FeatureAA is present.
So it may be that the information 
that class A (transitively) extends the class(es) above is not present at all.
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{$\lnot$ FeatureA $\iff$ FeatureAA} hinzuzufügen.
Dadurch muss immer genau ein Exemplar der Klasse \code{A} mit der Vererbungsinformation ausgewählt werden.
