\subsection[Methodenzugriff]{Methodenzugriff (Ordner \code{MethodAccess})}
Im Feature \feature{FeatureA} greift die Klasse \code{A} auf die statische Methode \code{getValue()} und auf die Methode \code{getValue2()} der Klasse \code{B} des Features \feature{FeatureB} zu. 
\subsubsection{Fall 01: Das Feature \feature{FeatureB} ist im Feature-Modell als optional gekennzeichnet.} Dadurch kann es passieren, dass in einer Variante die benötigte Klasse \code{B} nicht zur Verfügung steht, da das Feature \feature{FeatureB} nicht ausgewählt wurde. Dieser Fall löst insgesamt vier Fehlermeldungen aus, wobei sich zwei davon auf die Methodenzugriffe beziehen (die anderen zwei Fehlermeldungen behandeln den Typzugriff auf den Default-Konstruktor der Klasse \code{B} und den Typ \code{B}, siehe dazu den Abschnitt \ref{sec:TypeAccess} (Typzugriff) auf Seite \pageref{sec:TypeAccess}):
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/MethodAccess/01/FeatureA/A.java:3:
  Semantic Error: MAYBE dependency:
Feature FeatureA accesses the method
  public static int getValue() { ... }
of feature FeatureB.
Feature FeatureB may not be present in every valid selection.

/MethodAccess/01/FeatureA/A.java:6:
  Semantic Error: MAYBE dependency:
Feature FeatureA accesses the constructor
  public B()
of feature FeatureB.
Feature FeatureB may not be present in every valid selection.

/MethodAccess/01/FeatureA/A.java:7:
  Semantic Error: MAYBE dependency:
Feature FeatureA accesses the method
  public int getValue2() { ... }
of feature FeatureB.
Feature FeatureB may not be present in every valid selection.

/MethodAccess/01/FeatureA/A.java:3
/MethodAccess/01/FeatureA/A.java:6:
  Semantic Error: 1 optional target:
Feature FeatureA accesses:
- the type
    (default package).B
  of feature FeatureB
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureA $\implies$ FeatureB} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureA} ausgewählt wurde, auch das Feature \feature{FeatureB} ausgewählt werden.
\subsubsection{Fall 02: Die Features \feature{FeatureA} und \feature{FeatureB} schließen sich im Feature-Modell gegenseitig aus.} Dadurch kann die Klasse \code{B} des Features \feature{FeatureB} nicht ausgewählt werden, wenn das Feature \feature{FeatureA} ausgewählt wird:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/MethodAccess/02/FeatureA/A.java:3:
  Semantic Error: NEVER dependency:
Feature FeatureA accesses the method
  public static int getValue() { ... }
of feature FeatureB.
Features FeatureA and FeatureB cannot both be present in a valid selection.

/MethodAccess/02/FeatureA/A.java:6:
  Semantic Error: NEVER dependency:
Feature FeatureA accesses the constructor
  public B()
of feature FeatureB.
Features FeatureA and FeatureB cannot both be present in a valid selection.

/MethodAccess/02/FeatureA/A.java:7:
  Semantic Error: NEVER dependency:
Feature FeatureA accesses the method
  public int getValue2() { ... }
of feature FeatureB.
Features FeatureA and FeatureB cannot both be present in a valid selection.

/MethodAccess/02/FeatureA/A.java:6
/MethodAccess/02/FeatureA/A.java:3:
  Semantic Error: 1 optional target:
Feature FeatureA accesses:
- the type
    (default package).B
  of feature FeatureB
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{FeatureA $\implies$ FeatureB} hinzuzufügen.
Dadurch muss, wenn das Feature \feature{FeatureA} ausgewählt wurde, auch das Feature \feature{FeatureB} ausgewählt werden. Allerdings kann dadurch das Feature \feature{FeatureA} in keiner Variante mehr ausgewählt werden. Eine Auswahl des Features \feature{FeatureA} würde im Feature-Modell zu einem Widerspruch führen, da das Feature \feature{FeatureA} zum einen das Feature \feature{FeatureB} impliziert, zum anderen aber mit diesem in gegenseitigem Ausschluss steht.
\subsubsection{Fall 03: Die Klasse \code{B} wird identisch in den zwei optionalen Features \feature{FeatureB} und \feature{FeatureB2} definiert.} Für die Zugriffe aus der Klasse \code{A} heraus werden nun zwei Ziele angeboten, die aber beide nicht ausgewählt werden müssen. Dadurch kann es passieren, dass in einer Variante gar kein Ziel zur Verfügung steht, wenn beide Features nicht ausgewählt wurden:
\begin{Verbatim}[fontsize=\scriptsize, frame=single]
/MethodAccess/03/FeatureA/A.java:3:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Feature FeatureA accesses:
- the method
    public static int getValue() { ... }
  of feature FeatureB
- the method
    public static int getValue() { ... }
  of feature FeatureB2

/MethodAccess/03/FeatureA/A.java:6:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Feature FeatureA accesses:
- the constructor
    public B()
  of feature FeatureB
- the constructor
    public B()
  of feature FeatureB2

/MethodAccess/03/FeatureA/A.java:7:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Feature FeatureA accesses:
- the method
    public int getValue2() { ... }
  of feature FeatureB
- the method
    public int getValue2() { ... }
  of feature FeatureB2

/MethodAccess/03/FeatureA/A.java:3
/MethodAccess/03/FeatureA/A.java:6:
  Semantic Error: 2 optional targets 
  (there may be a valid selection where none of these targets is present):
Feature FeatureA accesses:
- the type
    (default package).B
  of feature FeatureB
- the type
    (default package).B
  of feature FeatureB2
\end{Verbatim}
Um diese Fehler zu beseitigen, ist es ausreichend, zum Feature-Modell das Constraint \constraint{$\lnot$ FeatureB $\iff$ FeatureB2} hinzuzufügen.
Dadurch muss immer genau ein Exemplar der Klasse \code{B} ausgewählt werden.
